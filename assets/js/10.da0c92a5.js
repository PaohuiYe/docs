(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{361:function(s,n,t){"use strict";t.r(n);var a=t(42),r=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("[TOC]")]),s._v(" "),t("h1",{attrs:{id:"_61、序列化二叉树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_61、序列化二叉树"}},[s._v("#")]),s._v(" 61、序列化二叉树")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("请实现两个函数，分别用来序列化和反序列化二叉树")]),s._v(" "),t("p",[s._v("二叉树的序列化是指：把一棵二叉树按照某种遍历方式的结果以某种格式保存为字符串，从而使得内存中建立起来的二叉树可以持久保存。序列化可以基于先序、中序、后序、层序的二叉树遍历方式来进行修改，序列化的结果是一个字符串，序列化时通过 某种符号表示空节点（#），以 ！ 表示一个结点值的结束（value!）。")]),s._v(" "),t("p",[s._v("二叉树的反序列化是指：根据某种遍历顺序得到的序列化字符串结果str，重构二叉树。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('char* Serialize(TreeNode *root) {\n    string *res = new string("");\n    if (!root) return (char*)res->c_str();\n    queue<TreeNode*> q;\n    q.push(root);\n    while (!q.empty()) {\n        TreeNode* curr = q.front();\n        q.pop();\n        if (curr->val == -1) {\n            *res += "#";\n            continue;\n        }\n        else {\t\t\t\n            *res += to_string(curr->val) + "!";\n        }\t\t\t\n        if (curr->left) q.push(curr->left);\n        else q.push(&TreeNode(-1));\n        if (curr->right) q.push(curr->right);\n        else q.push(&TreeNode(-1));\n    }\n    int length;\n    for ( length = res->size() - 1; length >= 0; length--) {\n        if (res->at(length) != \'#\') break;\n    }\n    res->resize(length + 1);\n    return (char*)res->c_str();\n}\nTreeNode* Deserialize(char *str) {\n    string s(str);\n    int pre = 0;\n    vector<int> v;\n    for (int i = 0; i < s.size(); i++) {\n        if (s.at(i) == \'!\') {\n            int val = atoi(s.substr(pre, i - pre).c_str());//i-pre+1-1\n            v.push_back(val);\n            pre = i + 1;\n        }\n        else if (s.at(i) == \'#\') {\n            v.push_back(-1);//-1代表#\n            pre++;\n        }\n    }\t\t\n    int len = v.size();\n    for (int i = 0; i < len;i++) {\n        if (v.at(i) == -1 && 2 * i + 1 < v.size()) {\n            v.insert(v.begin() + 2 * i + 1, 2, -1);\n            len += 2;\n        }\n        /*cout << i << "：\\t";\n\t\t\tfor (auto x : v) cout << x << " ";\n\t\t\tcout << endl;*/\n    }\t\n    return buildTree(v, 0);\n}\nTreeNode * buildTree(vector<int> &data, int rootLoc) {\n    if (rootLoc >= data.size()) return nullptr;\n    if (data.at(rootLoc) == -1) return nullptr;//空位\n    TreeNode *root = new TreeNode(data.at(rootLoc));\n    root->left = buildTree(data, 2 * rootLoc + 1);\n    root->right = buildTree(data, 2 * rootLoc + 2);\n    return root;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_62、二叉搜索树的第k个结点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_62、二叉搜索树的第k个结点"}},[s._v("#")]),s._v(" 62、二叉搜索树的第k个结点")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("给定一棵二叉搜索树，请找出其中的第k小的结点。例如， （5，3，7，2，4，6，8）    中，按结点数值大小顺序第三小结点的值为4。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("中序遍历二叉搜索树，即从小到大")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("TreeNode* KthNode(TreeNode* pRoot, int k)\n{\n    if (!pRoot) return nullptr;\n    stack<TreeNode *> s;\n    //中序遍历根节点\n    s.push(pRoot);//line：1\n    bool isTraceBack = false;//line：2\n    while (!s.empty()) {\n        TreeNode *curr = s.top();\n        //1、有左节点 且 不是回溯 中序遍历左子树\n        if (curr->left && !isTraceBack) s.push(curr->left);\n        else {//无左节点 或 是回溯到当前节点的\n            //2、输出当前节点并在栈中删除该节点\n            if (--k == 0) return curr;\t\t\t\t\n            s.pop();\n            //3、如果存在右节点，中序遍历右子树\n            if (curr->right) {\n                s.push(curr->right);//对应line：1\n                isTraceBack = false;//对应line：2\n            }\n            else isTraceBack = true;//4、回溯 \n        }\n    }\n    return nullptr;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_63、数据流中的中位数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_63、数据流中的中位数"}},[s._v("#")]),s._v(" 63、数据流中的中位数")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("方法一：用一个小根堆")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("set<int> s;\nvoid Insert(int num)\n{\t\t\n\ts.insert(num);\t\t\t\n}\ndouble GetMedian()\n{\n\tauto it = s.begin();\t\n\tif ((int)(s.size() &1 )== 0) {//偶数\n\t\tadvance(it, s.size() / 2 - 1);\n\t\tint l = *it;\n\t\tadvance(it, 1);\n\t\treturn (l + *it) / 2.0;\n\t}\n\telse {\n\t\tadvance(it, s.size() / 2);\n\t\treturn *it;\n\t}\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("用两个堆：")]),s._v(" "),t("p",[s._v("大根堆存中位数左的数")]),s._v(" "),t("p",[s._v("小根堆存中位数右的数")]),s._v(" "),t("p",[s._v("保证大根堆的所有数<小根堆所有数")]),s._v(" "),t("p",[s._v("中位数在两个堆顶元素中")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Solution {\nprivate:\n\tset<int, greater<int>> left;//序列左半部分，用大根堆\n\tset<int> right;//序列右半部分，用小根堆\n\tint size = 0;\npublic:\t\n\tvoid Insert(int num)\n\t{\t\t\n\t\tif ((int)(size & 1)) {//奇数  插入到左边 取左边最大的，放到右边\n\t\t\tleft.insert(num);\n\t\t\tright.insert(*left.begin());\n\t\t\tleft.erase(left.begin());\n\t\t}\n\t\telse {//偶数  插入到右边 取右边最小的，放到左边\n\t\t\tright.insert(num);\n\t\t\tleft.insert(*right.begin());\n\t\t\tright.erase(right.begin());\n\t\t}\n\t\tsize++;\n\t}\n\tdouble GetMedian()\n\t{\n\t\tif ((int)(size & 1)) //奇数\n\t\t\treturn *(left.begin());\t\t\n\t\telse \n\t\t\treturn (*(left.begin()) + *(right.begin())) / 2.0;\t\t\n\t}\n};\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_64、滑动窗口的最大值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_64、滑动窗口的最大值"}},[s._v("#")]),s._v(" 64、滑动窗口的最大值")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("方法一：用双端队列模拟窗口")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("vector<int> maxInWindows(const vector<int>& num, unsigned int size)\n{\n    deque<int> dq;\n    vector<int> res;\t\t\n    for (int i = 0; i < num.size(); i++) {\t\t\t\n        while (!dq.empty() && num.at(dq.back()) < num.at(i))//比当前元素小的直接删除\n            dq.pop_back();\n        dq.push_back(i);\n        if (dq.front() + size <= i) //检查队首元素是否在当前窗口内\n            dq.pop_front();\n        if (i >= size-1)//获取结果 \n            res.push_back(num.at(dq.front()));\t\t\t\t\t\t\n    }\n    return res;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("方法二：直接遍历统计")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("vector<int> maxInWindows(const vector<int>& num, unsigned int size)\n{\n    vector<int> res;\n    if (!size || size>num.size()) return res;\n    for (int i = 0; i+size-1 < num.size(); i++) {\n        int max = num.at(i);\n        for (int j = i+1; j < i + size; j++) {\n            if (num.at(j) > max) max = num.at(j);\n        }\n        res.push_back(max);\n    }\n    return res;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])])])]),s._v(" "),t("h1",{attrs:{id:"_65、矩阵中的路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_65、矩阵中的路径"}},[s._v("#")]),s._v(" 65、矩阵中的路径")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v('请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如\n$$\n\\begin{bmatrix} a & b & c &e \\ s & f & c & s \\ a & d & e& e\\ \\end{bmatrix}\n$$\n矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。')])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("DFS递归")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("bool hasPath(char* matrix, int rows, int cols, char* str)\n{\n\tif (str == nullptr || rows <= 0 || cols <= 0)\n\t\treturn false;\n\tfor (int i = 0; i < rows*cols; i++) //遍历矩阵\n\t\tif (*(matrix + i) == *str) {\n\t\t\tvector<bool> canWalk(rows*cols, true);\n\t\t\tcanWalk.at(i) = false;\n\t\t\tif (DFS(matrix, rows, cols, str + 1, i, canWalk)) return true;\n\t\t}\n\treturn false;\n}\nbool DFS(char* matrix, int rows, int cols, char* str, int preLoc, vector<bool> &canWalk) {\n\tif (*str == 0) return true;\n\tint r = preLoc / cols, c = preLoc % cols;//前一个字符的行，列\n\ttypedef pair<int, int> mp;\n\tvector<mp> fourDir = { mp(r - 1,c),mp(r + 1,c),mp(r,c - 1),mp(r,c + 1) };//四个方向的点\n\tfor (auto x : fourDir) {//遍历四个方向的点\n\t\tint r = x.first, c = x.second, loc = r * cols + c;//当前点的行，列，位置\n\t\tif (r >= 0 && r <= rows && c >= 0 && c <= cols//未越界\t\n\t\t\t&& *(matrix + loc) == *str//字符相等\n\t\t\t&& canWalk.at(loc)) {//能走\t\t\t\n\t\t\tcanWalk.at(loc) = false;\n\t\t\tif (DFS(matrix, rows, cols, str + 1, loc, canWalk)) return true;\n\t\t}\n\t}\n\treturn false;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])])])]),s._v(" "),t("h1",{attrs:{id:"_66、机器人的运动范围"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_66、机器人的运动范围"}},[s._v("#")]),s._v(" 66、机器人的运动范围")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("能到达的格子：")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int movingCount(int threshold, int rows, int cols)\n{\n    if (rows <= 0 || cols <= 0) return 0;\n    vector<bool> canWalk(rows*cols, true);\n    int k = 0;\n    for (int i = 0; i < rows; i++)\n        for (int j = 0; j < cols; j++,k++)        \n            if (sum(i,j) > threshold) canWalk.at(k) = false;          \n    if (!canWalk.at(0)) return 0;\n    canWalk.at(0) = false;\n    return DFS(rows, cols, 0, canWalk);\n}\nint DFS(int rows, int cols, int preLoc, vector<bool> &canWalk) {//从loc格子\n    int r = preLoc / cols, c = preLoc % cols;//前一个字符的行，列\n    typedef pair<int, int> mp;\n    vector<mp> fourDir = { mp(r - 1,c),mp(r + 1,c),mp(r,c - 1),mp(r,c + 1) };//四个方向的点\n    int count = 0;\n    for (auto x : fourDir) {//遍历四个方向的点\n        int r = x.first, c = x.second, loc = r * cols + c;//当前点的行，列，位置\n        if (r >= 0 && r < rows && c >= 0 && c < cols//未越界\t\t\t\t\n            && canWalk.at(loc)) {//能走\n            canWalk.at(loc) = false;\t\t\n            int thisDirPath = DFS(rows, cols, loc, canWalk);\t\t\t\t\n            count += thisDirPath;\t\t\t\t\t\t\t\n        }\n    }\t\t\t\n    return count + 1;//当前格子+四个方向的和\n}\t\nint sum(int x,int y) {\n    int sum = 0;\n    while (x) {\n        sum += x % 10;\n        x /= 10;\n    }\n    while (y) {\n        sum += y % 10;\n        y /= 10;\n    }\n    return sum;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br")])]),t("p",[s._v("能走的最大路径长度：")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int DFS(int rows, int cols, int preLoc, vector<bool> canWalk) {\n\tint r = preLoc / cols, c = preLoc % cols;//前一个字符的行，列\n\ttypedef pair<int, int> mp;\n\tvector<mp> fourDir = { mp(r - 1,c),mp(r + 1,c),mp(r,c - 1),mp(r,c + 1) };//四个方向的点\n\tint maxPath = 0;\n\tfor (auto x : fourDir) {//遍历四个方向的点\n\t\tint r = x.first, c = x.second, loc = r * cols + c;//当前点的行，列，位置\n\t\tif (r >= 0 && r < rows && c >= 0 && c < cols//未越界\t\t\t\t\n\t\t\t&& canWalk.at(loc)) {//能走\n\t\t\tcanWalk.at(loc) = false;\n\t\t\tint thisDirPath = DFS(rows, cols, loc, canWalk);\n\t\t\tif (thisDirPath > maxPath) maxPath = thisDirPath;\n\t\t}\n\t}\t\n\treturn maxPath + 1;\n}\nint movingCount(int threshold, int rows, int cols)\n{\n\tif (rows <= 0 || cols <= 0) return 0;\n\tvector<bool> canWalk(rows*cols, true);\n\tint k = 0;\n\tfor (int i = 0; i < rows; i++)\n\t\tfor (int j = 0; j < cols; j++, k++)\n\t\t\tif (sum(i, j) > threshold) canWalk.at(k) = false;\n\tif (!canWalk.at(0)) return 0;\n\tcanWalk.at(0) = false;\n\treturn DFS(rows, cols, 0, canWalk);\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_67、剪绳子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_67、剪绳子"}},[s._v("#")]),s._v(" 67、剪绳子")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n>1并且m>1），每段绳子的长度记为k[0],k[1],...,k[m]。请问"),t("code",[s._v("k[0]*k[1]*...*k[m]")]),s._v("可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("方法一：动态规划")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int cutRope(int number) {\n\tvector<int> opt(number + 1);\n\topt.at(0) = 0;\n\topt.at(1) = 1;\n\tfor (int i = 2; i <= number; i++) {\n\t\tint max_ = 0;\n\t\tfor (int j = 1; j < i; j++) {\n\t\t\tint t = j * max(opt.at(i - j), i - j);\n\t\t\tif (t > max_) max_ = t;\n\t\t}\n\t\topt.at(i) = max_;\n\t}\n\treturn opt.at(number);\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("方法二：找规律")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("先举几个例子，可以看出规律来。\n 4 ： 2 * 2 \n 5 ： 2 * 3\n 6 ： 3 * 3\n 7 ： 2 * 2 * 3 或者4 * 3\n 8 ： 2 * 3 * 3\n 9 ： 3 * 3 * 3\n 10：2 * 2 * 3 * 3 或者4 * 3 * 3\n 11：2 * 3 * 3 * 3\n 12：3 * 3 * 3 * 3\n 13：2 * 2 * 3 * 3 * 3 或者4 * 3 * 3 * 3\n\n 下面是分析：\n 首先判断k[0]到k[m]可能有哪些数字，实际上只可能是2或者3。\n 当然也可能有4，但是4 = 2 * 2，我们就简单些不考虑了。\n 5 < 2 * 3, 6 < 3 * 3, 比6更大的数字我们就更不用考虑了，肯定要继续分。\n 其次看2和3的数量，2的数量肯定小于3个，为什么呢？因为2 * 2 * 2 < 3 * 3，那么题目就简单了。\n 直接用n除以3，根据得到的余数判断是一个2还是两个2还是没有2就行了。\n 由于题目规定m > 1，所以2只能是1 * 1，3只能是2 * 1，这两个特殊情况直接返回就行了。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int cutRope(int number) {\n    if (number <= 3) return number - 1;\t\n    int x = number % 3;\n    int y = number / 3;\n    if (x == 0)\n        return pow(3, y);\t\t\n    else if (x == 1)\n        return 2 * 2 * (int)pow(3, y - 1);\t\t\n    else\n        return 2 * (int)pow(3, y);\t\t\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])])])])])}),[],!1,null,null,null);n.default=r.exports}}]);