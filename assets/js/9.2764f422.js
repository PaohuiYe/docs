(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{362:function(s,n,t){"use strict";t.r(n);var a=t(42),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("[TOC]")]),s._v(" "),t("h1",{attrs:{id:"_41、和为s的连续正数序列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_41、和为s的连续正数序列"}},[s._v("#")]),s._v(" 41、和为S的连续正数序列")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!")]),s._v(" "),t("p",[s._v("输出描述：")]),s._v(" "),t("blockquote",[t("p",[s._v("输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("方法一：")]),s._v(" "),t("p",[s._v("绿色序列的和为sum")]),s._v(" "),t("p",[t("img",{attrs:{src:"D:%5CNotebook%5Cimg%5C1586591009982.png",alt:"1586591009982"}})]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("vector<vector<int> > FindContinuousSequence(int sum) {\n    vector<vector<int> > res;\n    int low = 1, high = 2;\n    while (low<high )\n    {\n        int s = (low + high)*(high - low + 1) / 2;\n        if (s == sum) {\n            vector<int> sq;\n            for (int i = low; i <= high; i++) sq.push_back(i);\n            res.push_back(sq);\n            low++;\n        }\n        else if (s < sum) \n            high++;\n        else\n            low++;\n    }\n    return res;\n}\t\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("方法二：")]),s._v(" "),t("p",[s._v("序列长度n满足"),t("code",[s._v("(1+n)*n/2<=sum")]),s._v("，可得"),t("code",[s._v("2<=n<sqrt(2\\*sum)")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("n为奇数\n因为"),t("code",[s._v("中间数 = 平均值")]),s._v("是个整数，且"),t("code",[s._v("sum = n * 中间数")])]),s._v(" "),t("p",[s._v("所以sum是n的整数倍，即"),t("code",[s._v("sum % n = 0")])])]),s._v(" "),t("li",[t("p",[s._v("n为偶数\n因为"),t("code",[s._v("sum = 平均值 * n = (中间数 + 0.5) * n = 中间数 * n + 0.5 * n")]),s._v("\n所以"),t("code",[s._v("sum % n = 0.5 * n")])])])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("vector<vector<int> > FindContinuousSequence(int sum) {\n    vector<vector<int> > res;\n    for (int n = (int)sqrt(2 * sum); n >=2 ; n--) {\n        //满足和为sum的奇数序列或偶数序列\t\t\t\n        if ((n & 1) == 1 && sum%n == 0 ||(n & 1) == 0 && (sum % n) * 2 == n)\n        {\n            vector<int> sq;\n            int low = sum / n - (n - 1) / 2, high = low + n - 1;\n            for (int i = low; i <= high; i++) sq.push_back(i);\n            res.push_back(sq);\n        }\t\t\t\t\t\t\n    }\n    return res;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_42、和为s的两个数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_42、和为s的两个数字"}},[s._v("#")]),s._v(" 42、和为S的两个数字")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的两个数，小的在前。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("方法一：")]),s._v(" "),t("p",[s._v("两个绿色数字的和为sum，复杂度O(n)")]),s._v(" "),t("p",[t("img",{attrs:{src:"D:%5CNotebook%5Cimg%5C1586596464621.png",alt:"1586596464621"}})]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("vector<int> FindNumbersWithSum(vector<int> array, int sum) {\n\tint l = 0, r = array.size() - 1;\n\tvector<int> res;\t\t\n\twhile (l<r)\n\t{\t\t\t\n\t\twhile (l<r && array.at(l) + array.at(r) >sum) r--;\n\t\twhile (l<r && array.at(l) + array.at(r) <sum) l++;\n\t\tif (array.at(l) + array.at(r) == sum) {\n\t\t\tres.push_back(array.at(l));\n\t\t\tres.push_back(array.at(r));\n\t\t\tbreak;\n\t\t}\t\t\t\t\t\t\t\n\t}\n\treturn res;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("方法二：")]),s._v(" "),t("p",[s._v("遍历第一个数，折半查找第二个数，复杂度O(nlog~2~n)")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("vector<int> FindNumbersWithSum(vector<int> array, int sum) {\n    vector<int> res(2);\n    int min = sum * sum;\n    int find = false;\n    for (auto x : array) {\n        int key = sum - x;\n        //折半查找key\n        int l = 0, r = array.size() - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (array.at(mid) == key && x*key < min) {\n                find = true;\t\t\t\t\t\n                res.at(0) = x < key ? x : key;\n                res.at(1) = x > key ? x : key;\n                min = x * key;\t\t\t\t\t\n                break;\n            }\n            else if (array.at(mid) < mid) r = mid - 1;\n            else l = mid + 1;\n        }\t\t\t\n    }\n    return find ? res : vector<int>();\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_43、循环左移字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_43、循环左移字符串"}},[s._v("#")]),s._v(" 43、循环左移字符串")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移n位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("方法一：")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('string LeftRotateString(string str, int n) {\n\tif (str.size() == 0) return "";\n\tn = n % str.size();\n\treturn str.substr(n) + str.substr(0, n);\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("方法二：")]),s._v(" "),t("p",[t("code",[s._v("abcXYZdef abcXYZdef")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('string LeftRotateString(string str, int n) {\n\tif (str.size() == 0) return "";\n\tn = n % str.size();\n\tstring s = str + str;\n\treturn s.substr(n, str.size());\t\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])])])]),s._v(" "),t("h1",{attrs:{id:"_44、翻转单词顺序列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_44、翻转单词顺序列"}},[s._v("#")]),s._v(" 44、翻转单词顺序列")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('string ReverseSentence(string str) {\t\t\t\t\n    int pre = str.size() - 1;//pre指向单词最后一个字母\n    string res = "";\n    //从后往前遍历\n    for (int i = pre; i >= 0; i--) {\n        if (str.at(i) == \' \') {\t\t\t\t\n            res += str.substr(i + 1, pre - i) + " ";//截取一个单词\t\t\t\n            pre = i - 1;//pre位置更新\n        }\n    }\t\t\n    res += str.substr(0, pre+1);//处理第一个单词\n    return res;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_45、扑克牌顺子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_45、扑克牌顺子"}},[s._v("#")]),s._v(" 45、扑克牌顺子")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")]),s._v("\nLL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)...他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子.....LL不高兴了,他想了想,决定大\\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。")]),s._v(" "),t("p",[s._v("现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("题目意思就是判断一个序列是否是可以是连续的，0可以当做任意数")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("bool IsContinuous(vector<int> numbers) {\t\t\n    //找到最小值，最大值，统计0的个数\n    int min, max;\n    for (auto x : numbers) \n        if (x) min = x;\n    max = min;\n    int zeroNum = 0;\n    for (auto x : numbers) {\n        if (x == 0) {\n            zeroNum++;\n            continue;\n        }\n        if (x < min) min = x;\n        if (x > max) max = x;\t\t\t\n    }\n    //判断\n    int dif = max - min + 1;\n    if (dif > numbers.size()-zeroNum)//差大于非零数字个数，需要用0补充\n        return dif == numbers.size();\n    else //差小于等于非零个数，需要用0扩充\n        return dif + zeroNum == numbers.size();\t\t\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_46、孩子们的游戏-圆圈中最后剩下的数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_46、孩子们的游戏-圆圈中最后剩下的数"}},[s._v("#")]),s._v(" 46、孩子们的游戏(圆圈中最后剩下的数)")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:")]),s._v(" "),t("p",[s._v("首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0...m-1报数....这样下去....直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)")]),s._v(" "),t("p",[s._v("如果没有小朋友，请返回-1")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("方法一：数组模拟")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int LastRemaining_Solution(int n, int m)\n{\n    if (n == 0) return -1;\n    vector<int> v;\n    for (int i = 0; i < n; i++) \n        v.push_back(i);\n    int i = 0;\n    while (v.size() > 1) {\n        i = (i + m - 1) % v.size();\n        v.erase(v.begin()+i);\t\t\t\n    }\n    return v.front();\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("方法二：动态规划("),t("a",{attrs:{href:"https://blog.nowcoder.net/n/81a858b422804183a1a51dbfd4084ebc",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),t("OutboundLink")],1),s._v(")")]),s._v(" "),t("p",[s._v("f(n)表示n个人的时候，能够存活的位置索引。")]),s._v(" "),t("p",[s._v("则有")]),s._v(" "),t("p",[t("code",[s._v("f(1) = 0")])]),s._v(" "),t("p",[t("code",[s._v("f(n)=(f(n−1,m)+m) % n")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int LastRemaining_Solution(int n, int m)\n{\n\tif (n == 0 || m == 0) return -1;\n\tint pre = 0;\n\tfor (int i = 2; i <= n; i++) {\n\t\tpre = (pre + m) % i;\n\t}\n\treturn pre;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_47、求1-2-3-n"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_47、求1-2-3-n"}},[s._v("#")]),s._v(" 47、求1+2+3+...+n")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("求1+2+3+...+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int Sum_Solution(int n) {\n    int res = n;\n    res && (res += Sum_Solution(n - 1));\n    return res;\n}\t\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("等价于")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int Sum_Solution(int n) {\n    if (n == 0) return n;\n    return n + Sum_Solution(n - 1);\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_48、不用加减乘除做加法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_48、不用加减乘除做加法"}},[s._v("#")]),s._v(" 48、不用加减乘除做加法")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")]),s._v("\n写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("十进制做 5+7=12")]),s._v(" "),t("ol",[t("li",[s._v("相加各位的值，不算进位，得到"),t("code",[s._v("2")]),s._v("。")]),s._v(" "),t("li",[s._v("计算进位值，得到"),t("code",[s._v("1")]),s._v("，左移一位得到"),t("code",[s._v("10")]),s._v("，转为计算"),t("code",[s._v("2 + 10")]),s._v("。")]),s._v(" "),t("li",[s._v("重复上述两步，直到进位数为0，则第一个数为结果。")])]),s._v(" "),t("p",[s._v("二进制做 5+7=12：")]),s._v(" "),t("p",[s._v("101 + 111")]),s._v(" "),t("ol",[t("li",[s._v("相加各位的值，不算进位，二进制每位相加就相当于各位做异或操作，"),t("code",[s._v("101 ^ 111=010")]),s._v("。")]),s._v(" "),t("li",[s._v("计算进位值，二进制进位相当于各位做与操作，"),t("code",[s._v("101 & 111 = 101")]),s._v("，再向左移一位得到"),t("code",[s._v("1010")]),s._v("，转为计算"),t("code",[s._v("010 + 1010")])]),s._v(" "),t("li",[s._v("重复上述两步， 直到进位数为0，则第一个数为结果。")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int Add(int num1, int num2)\n{\n    while (num2)\n    {\n        int sum1 = num1 ^ num2;\n        int sum2 = (num1 & num2) << 1;\n        num1 = sum1;\n        num2 = sum2;\n    }\n    return num1;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_49、把字符串转换成整数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_49、把字符串转换成整数"}},[s._v("#")]),s._v(" 49、把字符串转换成整数")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public:\n\tint StrToInt(string str) {\t\n\t\tif (!str.size()) return 0;\n\t\tlong long int num = 0;\t\n\t\tfor (int i = (str.at(0) == '-' || str.at(0) == '+') ? 1 : 0\n\t\t\t; i < str.size(); i++) {\n\t\t\tif (str.at(i) > '9' || str.at(i) < '0') return 0;\t\t\t\n\t\t\tnum = (num << 1) + (num << 3) + (str.at(i) & 0xf);\t\t\t\t\t\t\t//等价于：num = num * 10 + str.at(i) - 48;\n\t\t}\n\t\tif (str.at(0) == '-') num = -num;\n\t\treturn (num <= INT32_MAX && num >= INT32_MIN) ? num : 0;\n\t}\n};\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_50、数组中重复的数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_50、数组中重复的数字"}},[s._v("#")]),s._v(" 50、数组中重复的数字")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("方法一：用一个长度n的数组记录每个数字出现的此时")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// Parameters:\n//        numbers:     an array of integers\n//        length:      the length of array numbers\n//        duplication: (Output) the duplicated number in the array number\n// Return value:       true if the input is valid, and there are some duplications in the array number\n//                     otherwise false\nbool duplicate(int numbers[], int length, int* duplication) {\n    if (!length) return false;\n    int *record = new int[length]{ 0 };\n    for (int i = 0; i < length; i++) {\n        if (++(*(record + numbers[i])) == 2) {\n            *duplication = numbers[i];\n            delete[] record;\n            return true;\n        }\n    }\n    delete[] record;\n    return false;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("方法二：使用原数组记录")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("bool duplicate(int numbers[], int length, int* duplication) {\n    if (!length) return false;\t\t\n    for (int i = 0; i < length; i++) {\n        int absCurr = numbers[i] < 0 ? -numbers[i] : numbers[i];\n        if (numbers[absCurr] < 0) {\n            *duplication = absCurr;\n            return true;\n        }\n        numbers[absCurr] *= -1;\n    }\t\t\n    return false;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_51、构建乘积数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_51、构建乘积数组"}},[s._v("#")]),s._v(" 51、构建乘积数组")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],其中B中的元素B[i]=A[0]"),t("em",[s._v("A[1]")]),s._v("...*A[i-1]"),t("em",[s._v("A[i+1]")]),s._v("...*A[n-1]。不能使用除法。（注意：规定B[0] = A[1] * A[2] * ... * A[n-1]，B[n-1] = A[0] * A[1] * ... * A[n-2];）")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("- 2 3 4 5\n1 - 3 4 5\n1 2 - 4 5\n1 2 3 - 5\n1 2 3 4 -\n\nv1: 1   1       2       6       24\nv2: 1   5       20      60      120\nB : 120 60      40      30      24\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("方法一：")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("vector<int> multiply(const vector<int>& A) {\n    if (A.size() <= 1) return vector<int>();\n    vector<int> v1 = { 1 };\n    vector<int> v2 = v1;\n\t//计算下三角\n    int base = 1;   \n    for (int i = 0; i < A.size() - 1; i++) {\n        base *= A.at(i);\n        v1.push_back(base);\n    }\n\t//计算上三角\n    base = 1;\n    for (int i = A.size() - 1; i > 0; i--) {\n        base *= A.at(i);\n        v2.push_back(base);\n    }\t\t\n\t//交叉相乘\n    vector<int> B;\t\t\n    for (int i = 0; i < A.size(); i++) \n        B.push_back(v1.at(i) * v2.at(A.size() - i - 1));\t\t\t\t\n    return B;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[s._v("方法二：优化方法一")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("vector<int> multiply(const vector<int>& A) {\n    if (A.size() <= 1) return vector<int>();\n    vector<int> B = { 1 };\t\t\n    //计算下三角\n    int base = 1;\n    for (int i = 0; i < A.size() - 1; i++) {\n        base *= A.at(i);\n        B.push_back(base);\n    }\n    //计算上三角同时交叉相乘\n    base = 1;\n    int j = 0;\t\t\n    for (int i = A.size() - 1; i > 0; i--) {\n        base *= A.at(i);\t\t\t\n        B.at(i-1) *= base;\n    }\t\t\t\t\n    return B;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_52、正则表达式匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_52、正则表达式匹配"}},[s._v("#")]),s._v(" 52、正则表达式匹配")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('请实现一个函数用来匹配包括\'.\'和\'*\'的正则表达式。模式中的字符\'.\'表示任意一个字符，而\'*\'表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但是与"aa.a"和"ab*a"均不匹配\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("KEY")])]),s._v(" "),t("p",[s._v("首先，考虑特殊情况：")]),s._v(" "),t("ol",[t("li",[s._v("两个字符串都为空，返回"),t("code",[s._v("true")]),s._v("；")]),s._v(" "),t("li",[t("code",[s._v("str")]),s._v("非空，"),t("code",[s._v("patter")]),s._v("空，返回"),t("code",[s._v("false")]),s._v("；")]),s._v(" "),t("li",[t("code",[s._v("str")]),s._v("空，"),t("code",[s._v("patter")]),s._v("非空，可能匹配成功，因为"),t("code",[s._v("*")]),s._v("之前的元素可以出现0次；")])]),s._v(" "),t("p",[s._v("然后开始对比"),t("code",[s._v("str")]),s._v("与"),t("code",[s._v("pattern")]),s._v("的第一个字符，有两种可能")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("pattern下一个字符不为"),t("code",[s._v("*")])]),s._v(" "),t("p",[s._v("直接匹配当前字符。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("匹配成功，继续匹配下一个；（注意这里的匹配成功，除了两个字符相同的情况外，还有一种情况，就是"),t("code",[s._v("pattern")]),s._v("的当前字符为"),t("code",[s._v(".")]),s._v("，同时"),t("code",[s._v("str")]),s._v("的当前字符不为"),t("code",[s._v("\\0")]),s._v("。）")])]),s._v(" "),t("li",[t("p",[s._v("匹配失败，直接返回false；")])])])]),s._v(" "),t("li",[t("p",[s._v("pattern下一个字符为"),t("code",[s._v("*")])]),s._v(" "),t("p",[t("code",[s._v("x*")]),s._v("可以代表0个或多个。")]),s._v(" "),t("ul",[t("li",[s._v("当"),t("code",[s._v("x*")]),s._v("代表0个x时，相当于跳过这个"),t("code",[s._v("x*")]),s._v("，因此"),t("code",[s._v("str")]),s._v("当前字符不变，"),t("code",[s._v("pattern")]),s._v("当前字符后移两位；")]),s._v(" "),t("li",[s._v("当"),t("code",[s._v("x*")]),s._v("代表多个x时，"),t("code",[s._v("str")]),s._v("当前字符移向下一个，pattern当前字符不变；")])]),s._v(" "),t("blockquote",[t("p",[s._v("举例：")]),s._v(" "),t("ol",[t("li",[t("p",[t("code",[s._v('str = "aa"，pattern = "a*a"')]),s._v("->"),t("code",[s._v('str = "a"，pattern = "a*a"')]),s._v("->")]),s._v(" "),t("p",[t("code",[s._v('str = "a"，pattern = "a"')]),s._v("，返回"),t("code",[s._v("true")]),s._v("；")])]),s._v(" "),t("li",[t("p",[t("code",[s._v('str = "aaa"，pattern = "a*a"')]),s._v("->"),t("code",[s._v('str = "aa"，pattern = "a*a"')]),s._v("，变为1，返回"),t("code",[s._v("true")]),s._v("；")])]),s._v(" "),t("li",[t("p",[t("code",[s._v('str = "aa"，pattern = "a*c*a"')]),s._v("->"),t("code",[s._v('str = "a"，pattern = "a*c*a"')]),s._v("->")]),s._v(" "),t("p",[t("code",[s._v('str = "a"，pattern = "c*a"')]),s._v("->"),t("code",[s._v('str = "a"，pattern = "a"')]),s._v("，返回"),t("code",[s._v("true")]),s._v("；")])])])])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("bool match(const char* str, const char* pattern)\n{\n    if (*str == '\\0' && *pattern == '\\0')\n        return true;\n    if (*str != '\\0' && *pattern == '\\0')\n        return false;\n    //if the next character in pattern is not '*'\n    if (*(pattern + 1) != '*')\n    {\n        if (*str == *pattern || (*str != '\\0' && *pattern == '.'))\n            return match(str + 1, pattern + 1);\n        else\n            return false;\n    }\n    //if the next character is '*'\n    else\n    {\n        if (*str == *pattern || (*str != '\\0' && *pattern == '.'))\n            return match(str, pattern + 2) || match(str + 1, pattern);\n        else\n            return match(str, pattern + 2);\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_53、表示数值的字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_53、表示数值的字符串"}},[s._v("#")]),s._v(" 53、表示数值的字符串")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v('请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串"+100","5e2","-123","3.1416"和"-1E-16"都表示数值。 但是"12e","1a3.14","1.2.3","+-5"和"12e+4.3"都不是。')])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("bool isNumeric(const char* string)\n{\n    if (*string == 0) return false;\n    bool hasDecimal = false;//有小数点\n    bool hasScience = false;//有E\n    bool hasSymbol = false;//有+ - \n    bool isFirst = true;//是数字的开头\n    while (*string) {\n        if (*string == '+' || *string == '-') {\n            if (hasSymbol || !isFirst) return false; //已经有过+ -或不在数字开头\n            hasSymbol = true;\t\t\t\t\n        }\n        else if (*string == '.') {\n            if (hasDecimal) return false; //已经有过小数点\t\t\t\t\t\n            hasDecimal = true;\n        }\n        else if (*string == 'e' || *string == 'E') {\n            if (hasScience) return false; //已经有过e E\t\t\t\t\t\n            if (*(string + 1) == 0) return false; //e E在结尾\t\t\n            if (*(string + 1) == '+' || *(string + 1) == '-') string++;\n            hasDecimal = true; //e后面禁止小数\n            hasScience = true;\t\t\t\t\n        }\n        else if (*string<'0' || *string>'9') return false;\n        isFirst = false;\n        string++;\n    }\n    return true;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])])])]),s._v(" "),t("h1",{attrs:{id:"_54、字符流中第一个不重复的字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_54、字符流中第一个不重复的字符"}},[s._v("#")]),s._v(" 54、字符流中第一个不重复的字符")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v('请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符"go"时，第一个只出现一次的字符是"g"。如果当前字符流没有存在出现一次的字符，返回#字符。')]),s._v(" "),t("p",[s._v('例如字符流为“google"时，输出为"ggg#ll"。')])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("//Insert one char from stringstream\nmap<char, int> mp;\nstring str = \"\";\nvoid Insert(char ch)\n{\n    mp[ch]++;\n    str+=ch;\n}\n//return the first appearence once char in current stringstream\nchar FirstAppearingOnce()\n{\n    for (int i = 0; i < str.size(); ++i) \n        if (mp[str[i]] == 1)\n            return str[i];\n    return '#';\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])])])]),s._v(" "),t("h1",{attrs:{id:"_55、链表中环的入口结点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_55、链表中环的入口结点"}},[s._v("#")]),s._v(" 55、链表中环的入口结点")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("方法一：用map存储每个节点，空间复杂度O(n)")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ListNode* EntryNodeOfLoop(ListNode* pHead)\n{\n    map<ListNode*, bool> m;\n    while(pHead) {\n        if (m[pHead]) return pHead;\n        m[pHead] = true;\n        pHead = pHead->next;\n    }\n    return nullptr;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("方法二：空间复杂度O(1)")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.nowcoder.com/questionTerminal/253d2c59ec3e4bc68da16833f79a38e4",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("两个结论：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("设置快慢指针，假如有环，他们最后一定相遇。")])]),s._v(" "),t("li",[t("p",[s._v("两个指针分别从链表头和相遇点继续出发，每次走一步，最后一定相遇与环入口。")]),s._v(" "),t("p",[s._v("证明：")]),s._v(" "),t("blockquote",[t("p",[s._v("设：")]),s._v(" "),t("p",[s._v("链表头到环入口长度为--"),t("strong",[s._v("a")])]),s._v(" "),t("p",[s._v("环入口到相遇点长度为--"),t("strong",[s._v("b")])]),s._v(" "),t("p",[s._v("相遇点到环入口长度为--"),t("strong",[s._v("c")])]),s._v(" "),t("p",[t("img",{attrs:{src:"D:%5CNotebook%5Cimg%5C1586849247383.png",alt:"1586849247383"}})]),s._v(" "),t("p",[s._v("则：相遇时\n快指针路程=a+(b+c)k+b ，k>=1  其中b+c为环的长度，k为绕环的圈数（k>=1,即最少一圈，不能是0圈，不然和慢指针走的一样长，矛盾）。\n慢指针路程=a+b\n快指针走的路程是慢指针的两倍，所以：\n（a+b）*2=a+(b+c)k+b\n化简可得：\na=(k-1)(b+c)+c 这个式子的意思是： 链表头到环入口的距离=相遇点到环入口的距离+（k-1）圈环长度。其中k>=1,所以k-1>=0圈。所以两个指针分别从链表头和相遇点出发，最后一定相遇于环入口。")])])])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ListNode* EntryNodeOfLoop(ListNode* pHead)\n{\n    if (!pHead) return nullptr;\n    ListNode* pFast = pHead;\n    ListNode* pSlow = pHead;\n    do {\n        if (pFast->next == nullptr)  return nullptr;\n        pFast  = pFast->next->next;\n        pSlow = pSlow->next;\t\t\t\n    } while (pFast != pSlow);\n    while (pHead !=pSlow)\n    {\n        pHead = pHead->next;\n        pSlow = pSlow->next;\n    }\n    return pHead;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])])])]),s._v(" "),t("h1",{attrs:{id:"_56、删除链表中重复的结点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_56、删除链表中重复的结点"}},[s._v("#")]),s._v(" 56、删除链表中重复的结点")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1->2->3->3->4->4->5 处理后为 1->2->5")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("void erase(ListNode *&curr) {//删除curr后一个节点\n\tListNode *del = curr->next;\n\tcurr->next = del->next;\n\tdel->next = nullptr;\n\tdelete del;\n}\nListNode* deleteDuplication(ListNode* pHead)\n{\n\tif (!pHead) return nullptr;\n\tListNode *pre = new ListNode(-1);//设置虚头节点\n\tpre->next = pHead;\n\tpHead = pre;\n\tListNode *curr = pHead->next;\n\twhile (curr)\n\t{\n\t\tif (curr->next && curr->next->val == curr->val) {//当前节点与后一个相同\n\t\t\twhile (curr->next &&curr->next->val == curr->val) //删除后面重复的\n\t\t\t\terase(curr);\n\t\t\terase(pre);//删除当前节点\n\t\t\tcurr = pre->next;\n\t\t}\n\t\telse {\n\t\t\tpre = curr;\n\t\t\tcurr = curr->next;\n\t\t}\n\t}\n\treturn pHead->next;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("p",[s._v("删除重复节点，保留一个：")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ListNode* deleteDuplication(ListNode* pHead)\n{\n    if (!pHead) return nullptr;\n    ListNode *curr = pHead;\n    while (curr)\t\t\n        if (curr->next && curr->next->val == curr->val) \n            while (curr->next &&curr->next->val == curr->val) //删除后面重复的\n                erase(curr);\t\t\n    else curr = curr->next;\t\t\n    return pHead;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_57、二叉树的下一个结点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_57、二叉树的下一个结点"}},[s._v("#")]),s._v(" 57、二叉树的下一个结点")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("struct TreeLinkNode {\n\tint val;\n\tstruct TreeLinkNode *left;\n\tstruct TreeLinkNode *right;\n\tstruct TreeLinkNode *next;\n\tTreeLinkNode(int x) :val(x), left(NULL), right(NULL), next(NULL) {\n\t}\n};\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("方法一，先找到根结点，然后中序遍历整个树，中间输出")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("TreeLinkNode* GetNext(TreeLinkNode* pNode)\n{\n    TreeLinkNode *root = pNode;\n    while (root->next) root = root->next;\n    bool find = false;\n    stack<TreeLinkNode *> s;\n    //中序遍历根节点\n    s.push(root);//line：1\n    bool isTraceBack = false;//line：2\n    while (!s.empty()) {\n        TreeLinkNode *curr = s.top();\n        //1、有左节点 且 不是回溯 中序遍历左子树\n        if (curr->left && !isTraceBack) s.push(curr->left);\n        else {//无左节点 或 是回溯到当前节点的\n            //2、输出当前节点并在栈中删除该节点\n            if (find) return curr;\n            if (curr == pNode) find = true;\n            cout << curr->val;\n            s.pop();\n            //3、如果存在右节点，中序遍历右子树\n            if (curr->right) {\n                s.push(curr->right);//对应line：1\n                isTraceBack = false;//对应line：2\n            }\n            else//回溯 \n                isTraceBack = true;\n        }\n    }\n    return nullptr;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("p",[s._v("方法二：考虑各种情况")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("TreeLinkNode* GetNext(TreeLinkNode* pNode)\n{\n    if (pNode->right) {//pNode有右节点\n        auto n = pNode->right;\n        while (n->left) n = n->left;\n        return n;\n    }\n    else {//pNode没有右节点\n        auto parent = pNode->next;\n        if (!parent) return nullptr;\n        else if (parent->left == pNode) return parent;//pNode是左节点\t\t\t\t\t\t\n        else {//pNode右节点\n            //向上遍历，直到当前节点是其父节点的左结点，返回父节点\n            while (pNode->next) {\n                if (pNode->next->left == pNode) return pNode->next;\n                pNode = pNode->next;\n            }\n            return nullptr;\n        }\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_58、对称的二叉树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_58、对称的二叉树"}},[s._v("#")]),s._v(" 58、对称的二叉树")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("p",[s._v("方法一：BFS")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("bool isSymmetrical(TreeNode* pRoot)\n{\n    if (!pRoot) return true;\n    else if (!pRoot->left && !pRoot->right) return true;\n    else if (!pRoot->left||!pRoot->right) return false;\t\t\n    vector<bool> v1;\n    vector<bool> v2;\n    queue<TreeNode*> q;\n    //把左右子树的一对数看成一个整体出队入队\n    q.push(pRoot->left);\n    q.push(pRoot->right);\n    while (!q.empty()) {\n        auto l = q.front(); q.pop();\t\t\t\n        auto r = q.front(); q.pop();\t\n\n        if (l->left) {//左->左\n            q.push(l->left); v1.push_back(1);\n        }\n        if (r->right) {//右->右\n            q.push(r->right);  v2.push_back(0);\n        }\t\t\t\n        if (r->left) {//左->右\n            q.push(r->left); v2.push_back(1);\n        }\n        if (l->right) {//右->左\n            q.push(l->right); v1.push_back(0);\n        }\n        if (l->val != r->val)//判断值是否相同\n            return false;\n        if (v1.size()!=v2.size())//判断节点数目是否相同\n            return false;\n    }\t\t\n    if (!equal(v1,v2)) //判断结构是否是镜像\n        return false;\n    return true;\n}\nbool equal(vector<bool> v1, vector<bool> v2) {\n    for (int i = 0; i < v1.size(); i++) {\n        if (v1.at(i) + v2.at(i) != 1)//1对应0  0对应1\n            return false;\t\t\t\n    }\n    return true;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br")])]),t("p",[s._v("方法二：递归")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("bool isSymmetrical(TreeNode* pRoot)\n{\n    if (!pRoot) return true;\n    return isSymmetrical(pRoot->left, pRoot->right);\n}\nbool isSymmetrical(TreeNode* left, TreeNode* right) {\n    if (!left && !right) return true;\n    if (!left || !right) return false;\n    return left->val == right->val //左右节点值相等\n        && isSymmetrical(left->left, right->right) //对称的子树也是镜像\n        && isSymmetrical(left->right, right->left);//对称的子树也是镜像\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_59、按之字形顺序打印二叉树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_59、按之字形顺序打印二叉树"}},[s._v("#")]),s._v(" 59、按之字形顺序打印二叉树")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('vector<vector<int> > Print(TreeNode* pRoot) {\n\tvector<vector<int> > res;\n\tif (!pRoot) return res;\n\tlist<TreeNode*> q;\n\tbool flag = true;\n\n\tq.push_back(pRoot);\n\twhile (!q.empty()) {\n\t\tint size = q.size();\n\t\tvector<int> v;\n\t\twhile (size--) {\n\t\t\tif (flag) {//正向\n\t\t\t\tTreeNode* curr = q.back();\n\t\t\t\tq.pop_back();\n\t\t\t\tcout << curr->val << " ";\n\t\t\t\tv.push_back(curr->val);\n\t\t\t\tif (curr->left) q.push_front(curr->left);\n\t\t\t\tif (curr->right) q.push_front(curr->right);\n\t\t\t}\n\t\t\telse {//反向\n\t\t\t\tTreeNode* curr = q.front();\n\t\t\t\tq.pop_front();\n\t\t\t\tcout << curr->val << " ";\n\t\t\t\tv.push_back(curr->val);\n\t\t\t\tif (curr->right) q.push_back(curr->right);\n\t\t\t\tif (curr->left) q.push_back(curr->left);\n\t\t\t}\n\t\t}\n\t\tres.push_back(v);\n\t\tcout << endl;\n\t\tflag = !flag;\n\t}\n\treturn res;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br")])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"_60、把二叉树打印成多行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_60、把二叉树打印成多行"}},[s._v("#")]),s._v(" 60、把二叉树打印成多行")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("题目")])]),s._v(" "),t("p",[s._v("从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("实现")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("vector<vector<int> > Print(TreeNode* pRoot) {\n    vector<vector<int> > res;\n    if (!pRoot) return res;\n    queue<TreeNode*> q;\n    q.push(pRoot);\n    while (!q.empty()) {\n        int size = q.size();\n        vector<int> v;\n        while (size--) {\n            TreeNode* curr = q.front();\n            q.pop();\n            v.push_back(curr->val);\n            if (curr->left) q.push(curr->left);\n            if (curr->right) q.push(curr->right);\n        }\n        res.push_back(v);\n\n    }\n    return res;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])])])])])}),[],!1,null,null,null);n.default=e.exports}}]);