(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{365:function(t,s,n){"use strict";n.r(s);var a=n(42),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"二叉树的遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的遍历"}},[t._v("#")]),t._v(" 二叉树的遍历")]),t._v(" "),n("ul",[n("li",[t._v("将数组形式（BFS顺序）二叉树转为链形式；")]),t._v(" "),n("li",[t._v("三种DFS的递归、迭代是实现；")]),t._v(" "),n("li",[t._v("BFS迭代实现；")])]),t._v(" "),n("h3",{attrs:{id:"class-binarytree"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-binarytree"}},[t._v("#")]),t._v(" class BinaryTree")]),t._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("template<typename T>\nclass BinaryTree {\nprivate:\n\tstruct TreeNode {\n\t\tT val;\n\t\tstruct TreeNode *left;\n\t\tstruct TreeNode *right;\n\t\tTreeNode(T x) :\n\t\t\tval(x), left(nullptr), right(nullptr) {\n\t\t}\n\t};\n\tTreeNode *root_;\n\tTreeNode * buildTree(vector<int> &data, int rootLoc) {\n\t\tif (rootLoc >= data.size()) return nullptr;\n\t\tif (data.at(rootLoc) == -1) return nullptr;//空位\n\t\tTreeNode *root = new TreeNode(data.at(rootLoc));\n\t\troot->left = buildTree(data, 2 * rootLoc + 1);\n\t\troot->right = buildTree(data, 2 * rootLoc + 2);\n\t\treturn root;\n\t}\n\tTreeNode* Deserialize(char *str) {// \"0,1,2,3,#,#,4,#,5,#,6,\";\n\t\tstring s(str);\n\t\tint pre = 0;\n\t\tvector<int> v;\n\t\tfor (int i = 0; i < s.size(); i++) {\n\t\t\tif (s.at(i) == ',') {\n\t\t\t\tint val = atoi(s.substr(pre, i - pre).c_str());//i-pre+1-1\n\t\t\t\tv.push_back(val);\n\t\t\t\tpre = i + 1;\n\t\t\t}\n\t\t\telse if (s.at(i) == '#') {\n\t\t\t\tv.push_back(-1);//-1代表#\n\t\t\t\tpre += 2;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\t\t\n\t\tfor (int i = 0; i < v.size(); i++) \n\t\t\tif (v.at(i) == -1 && 2 * i + 1 < v.size()) \n\t\t\t\tv.insert(v.begin() + 2 * i + 1, 2, -1);\t\t\t\t\t\t\t\t\t\n\t\treturn buildTree(v, 0);\n\t}\npublic:\n\t/*用数组构建树 空位用-1表示*/\n\tBinaryTree() {\n\t\troot_ = nullptr;\n\t}\n\tBinaryTree(string data) {\n\t\troot_ = Deserialize((char*)data.c_str());\n\t}\n    TreeNode* get(){\n        return root_;\n    }\n\t/*先序遍历 迭代*/\n\tvoid preOrderDFS1() {\n\t\tif (!root_) return;\n\t\tstack<TreeNode *> s;\n\t\ts.push(root_);\n\t\twhile (!s.empty()) {\n\t\t\tTreeNode *curr = s.top();\n\t\t\ts.pop();\n\t\t\tcout << curr->val;\n\t\t\tif (curr->right) s.push(curr->right);\n\t\t\tif (curr->left) s.push(curr->left);\n\t\t}\n\t}\n\t/*先序遍历 递归*/\n\tvoid preOrderDFS2() {\n\t\tpreOrderDFS2(root_);\n\t}\n\tvoid preOrderDFS2(TreeNode* root) {\n\t\tif (root) {\n\t\t\tcout << root->val;\n\t\t\tpreOrderDFS2(root->left);\n\t\t\tpreOrderDFS2(root->right);\n\t\t}\n\t}\n\t/*中序遍历 迭代*/\n\t/*\n\t第一次到根节点不访问，只有回溯（从左子树回到根节点）才访问。\n\t设置一个标志位记录当前是否是回溯。\n\t*/\n\tvoid inOrderDFS1() {\n\t\tif (!root_) return;\n\t\tstack<TreeNode *> s;\n\t\t//中序遍历根节点\n\t\ts.push(root_);//line：1\n\t\tbool isTraceBack = false;//line：2\n\t\twhile (!s.empty()) {\n\t\t\tTreeNode *curr = s.top();\n\t\t\t//1、有左节点 且 不是回溯 中序遍历左子树\n\t\t\tif (curr->left && !isTraceBack) s.push(curr->left);\n\t\t\telse {//无左节点 或 是回溯到当前节点的\n\t\t\t\t//2、输出当前节点并在栈中删除该节点\n\t\t\t\tcout << curr->val;\n\t\t\t\ts.pop();\n\t\t\t\t//3、如果存在右节点，中序遍历右子树\n\t\t\t\tif (curr->right) {\n\t\t\t\t\ts.push(curr->right);//对应line：1\n\t\t\t\t\tisTraceBack = false;//对应line：2\n\t\t\t\t}\n\t\t\t\telse isTraceBack = true;//4、回溯 \n\t\t\t}\n\t\t}\n\t}\n\t/*中序遍历 递归*/\n\tvoid inOrderDFS2() {\n\t\tinOrderDFS2(root_);\n\t}\n\tvoid inOrderDFS2(TreeNode* root) {\n\t\tif (root) {\n\t\t\tinOrderDFS2(root->left);\n\t\t\tcout << root->val;\n\t\t\tinOrderDFS2(root->right);\n\t\t}\n\t}\n\t/*后续遍历 迭代*/\n\t/*\n\t根节点只有第二次出现在栈顶时，才能访问。\n\t设置一个变量标识该结点是否是第一次出现在栈顶。\n\t*/\n\tvoid postOrderDFS1() {\n\t\tif (!root_) return;\n\t\ttypedef pair<TreeNode *, bool> mpair;\n\t\tstack<mpair> s;\n\t\ts.push(mpair(root_, true));\n\t\twhile (!s.empty()) {\n\t\t\tmpair curr = s.top();\n\t\t\ts.pop();\n\t\t\tif (curr.second) {//是第一次在栈顶被读取\n\t\t\t\tcurr.second = false;\n\t\t\t\t/*交换line1 line2 line3的位置分别是三种顺序的遍历*/\n\t\t\t\ts.push(curr);//line1\n\t\t\t\tif (curr.first->right) s.push(mpair(curr.first->right, true));//line2\n\t\t\t\tif (curr.first->left) s.push(mpair(curr.first->left, true));//line3\n\t\t\t}\n\t\t\telse {//不是第一次在栈顶被读取\t\t\t\t\n\t\t\t\tcout << curr.first->val;\n\t\t\t}\n\t\t}\n\t}\n\t/*后续遍历 递归*/\n\tvoid postOrderDFS2() {\n\t\tpostOrderDFS2(root_);\n\t}\n\tvoid postOrderDFS2(TreeNode* root) {\n\t\tif (root) {\n\t\t\tpostOrderDFS2(root->left);\t\t\t\n\t\t\tpostOrderDFS2(root->right);\n\t\t\tcout << root->val;\n\t\t}\n\t}\n\t/*广度优先搜索*/\n\tvoid BFS() {\n\t\tif (!root_) return;\n\t\tqueue<TreeNode *> q;\n\t\tq.push(root_);\n\t\twhile (!q.empty()) {\n\t\t\tTreeNode *curr = q.front();\n\t\t\tq.pop();\n\t\t\tcout << curr->val;\n\t\t\tif (curr->left) q.push(curr->left);\n\t\t\tif (curr->right) q.push(curr->right);\n\t\t}\n\t}\n    /*打印二叉树*/\n    int sum(vector<int> &v) {\n\t\tint sum = 0;\n\t\tfor (auto x : v) sum += x;\n\t\treturn sum;\n\t}\n\n\tvoid toString(TreeNode* pRoot)\n\t{\n\t\tif (!pRoot) return;\t\t\n\t\tqueue<TreeNode*> q;\n\t\tq.push(pRoot);\n\t\tvector<int> cnt1;//当前层每个节点的子节点数\n\t\tvector<int> cnt2;//下一层每个节点的子节点数\n\t\tcnt1.push_back(1);//第一层节点数是1\n\t\twhile (!q.empty()) {\n\t\t\tTreeNode *curr = q.front();\n\t\t\tq.pop();\n\t\t\tcout << curr->val;\n\t\t\tfor (int i = 0; i < cnt1.size(); i++) {//输出一个节点，当前层总结点数减一\n\t\t\t\tif (cnt1.at(i) != 0) {\n\t\t\t\t\tif (--cnt1.at(i) == 0)\n\t\t\t\t\t\tcout << \"  |  \";//一个节点的所有子节点输出完，打印分隔符\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint childNum = (int)(curr->left != NULL) + (int)(curr->right != NULL);\n\t\t\tcnt2.push_back(childNum);//增添当前节点的子节点数\n\t\t\tif (sum(cnt1) == 0) {//这一层总节点数==0 换行 到下一层\n\t\t\t\tcnt1 = cnt2;\n\t\t\t\tcnt2.clear();\n\t\t\t\tcout << endl;\t\t\t\t\n\t\t\t}\n\t\t\tif (curr->left) q.push(curr->left);\n\t\t\tif (curr->right) q.push(curr->right);\n\n\t\t}\t\n\t}\n};\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br"),n("span",{staticClass:"line-number"},[t._v("63")]),n("br"),n("span",{staticClass:"line-number"},[t._v("64")]),n("br"),n("span",{staticClass:"line-number"},[t._v("65")]),n("br"),n("span",{staticClass:"line-number"},[t._v("66")]),n("br"),n("span",{staticClass:"line-number"},[t._v("67")]),n("br"),n("span",{staticClass:"line-number"},[t._v("68")]),n("br"),n("span",{staticClass:"line-number"},[t._v("69")]),n("br"),n("span",{staticClass:"line-number"},[t._v("70")]),n("br"),n("span",{staticClass:"line-number"},[t._v("71")]),n("br"),n("span",{staticClass:"line-number"},[t._v("72")]),n("br"),n("span",{staticClass:"line-number"},[t._v("73")]),n("br"),n("span",{staticClass:"line-number"},[t._v("74")]),n("br"),n("span",{staticClass:"line-number"},[t._v("75")]),n("br"),n("span",{staticClass:"line-number"},[t._v("76")]),n("br"),n("span",{staticClass:"line-number"},[t._v("77")]),n("br"),n("span",{staticClass:"line-number"},[t._v("78")]),n("br"),n("span",{staticClass:"line-number"},[t._v("79")]),n("br"),n("span",{staticClass:"line-number"},[t._v("80")]),n("br"),n("span",{staticClass:"line-number"},[t._v("81")]),n("br"),n("span",{staticClass:"line-number"},[t._v("82")]),n("br"),n("span",{staticClass:"line-number"},[t._v("83")]),n("br"),n("span",{staticClass:"line-number"},[t._v("84")]),n("br"),n("span",{staticClass:"line-number"},[t._v("85")]),n("br"),n("span",{staticClass:"line-number"},[t._v("86")]),n("br"),n("span",{staticClass:"line-number"},[t._v("87")]),n("br"),n("span",{staticClass:"line-number"},[t._v("88")]),n("br"),n("span",{staticClass:"line-number"},[t._v("89")]),n("br"),n("span",{staticClass:"line-number"},[t._v("90")]),n("br"),n("span",{staticClass:"line-number"},[t._v("91")]),n("br"),n("span",{staticClass:"line-number"},[t._v("92")]),n("br"),n("span",{staticClass:"line-number"},[t._v("93")]),n("br"),n("span",{staticClass:"line-number"},[t._v("94")]),n("br"),n("span",{staticClass:"line-number"},[t._v("95")]),n("br"),n("span",{staticClass:"line-number"},[t._v("96")]),n("br"),n("span",{staticClass:"line-number"},[t._v("97")]),n("br"),n("span",{staticClass:"line-number"},[t._v("98")]),n("br"),n("span",{staticClass:"line-number"},[t._v("99")]),n("br"),n("span",{staticClass:"line-number"},[t._v("100")]),n("br"),n("span",{staticClass:"line-number"},[t._v("101")]),n("br"),n("span",{staticClass:"line-number"},[t._v("102")]),n("br"),n("span",{staticClass:"line-number"},[t._v("103")]),n("br"),n("span",{staticClass:"line-number"},[t._v("104")]),n("br"),n("span",{staticClass:"line-number"},[t._v("105")]),n("br"),n("span",{staticClass:"line-number"},[t._v("106")]),n("br"),n("span",{staticClass:"line-number"},[t._v("107")]),n("br"),n("span",{staticClass:"line-number"},[t._v("108")]),n("br"),n("span",{staticClass:"line-number"},[t._v("109")]),n("br"),n("span",{staticClass:"line-number"},[t._v("110")]),n("br"),n("span",{staticClass:"line-number"},[t._v("111")]),n("br"),n("span",{staticClass:"line-number"},[t._v("112")]),n("br"),n("span",{staticClass:"line-number"},[t._v("113")]),n("br"),n("span",{staticClass:"line-number"},[t._v("114")]),n("br"),n("span",{staticClass:"line-number"},[t._v("115")]),n("br"),n("span",{staticClass:"line-number"},[t._v("116")]),n("br"),n("span",{staticClass:"line-number"},[t._v("117")]),n("br"),n("span",{staticClass:"line-number"},[t._v("118")]),n("br"),n("span",{staticClass:"line-number"},[t._v("119")]),n("br"),n("span",{staticClass:"line-number"},[t._v("120")]),n("br"),n("span",{staticClass:"line-number"},[t._v("121")]),n("br"),n("span",{staticClass:"line-number"},[t._v("122")]),n("br"),n("span",{staticClass:"line-number"},[t._v("123")]),n("br"),n("span",{staticClass:"line-number"},[t._v("124")]),n("br"),n("span",{staticClass:"line-number"},[t._v("125")]),n("br"),n("span",{staticClass:"line-number"},[t._v("126")]),n("br"),n("span",{staticClass:"line-number"},[t._v("127")]),n("br"),n("span",{staticClass:"line-number"},[t._v("128")]),n("br"),n("span",{staticClass:"line-number"},[t._v("129")]),n("br"),n("span",{staticClass:"line-number"},[t._v("130")]),n("br"),n("span",{staticClass:"line-number"},[t._v("131")]),n("br"),n("span",{staticClass:"line-number"},[t._v("132")]),n("br"),n("span",{staticClass:"line-number"},[t._v("133")]),n("br"),n("span",{staticClass:"line-number"},[t._v("134")]),n("br"),n("span",{staticClass:"line-number"},[t._v("135")]),n("br"),n("span",{staticClass:"line-number"},[t._v("136")]),n("br"),n("span",{staticClass:"line-number"},[t._v("137")]),n("br"),n("span",{staticClass:"line-number"},[t._v("138")]),n("br"),n("span",{staticClass:"line-number"},[t._v("139")]),n("br"),n("span",{staticClass:"line-number"},[t._v("140")]),n("br"),n("span",{staticClass:"line-number"},[t._v("141")]),n("br"),n("span",{staticClass:"line-number"},[t._v("142")]),n("br"),n("span",{staticClass:"line-number"},[t._v("143")]),n("br"),n("span",{staticClass:"line-number"},[t._v("144")]),n("br"),n("span",{staticClass:"line-number"},[t._v("145")]),n("br"),n("span",{staticClass:"line-number"},[t._v("146")]),n("br"),n("span",{staticClass:"line-number"},[t._v("147")]),n("br"),n("span",{staticClass:"line-number"},[t._v("148")]),n("br"),n("span",{staticClass:"line-number"},[t._v("149")]),n("br"),n("span",{staticClass:"line-number"},[t._v("150")]),n("br"),n("span",{staticClass:"line-number"},[t._v("151")]),n("br"),n("span",{staticClass:"line-number"},[t._v("152")]),n("br"),n("span",{staticClass:"line-number"},[t._v("153")]),n("br"),n("span",{staticClass:"line-number"},[t._v("154")]),n("br"),n("span",{staticClass:"line-number"},[t._v("155")]),n("br"),n("span",{staticClass:"line-number"},[t._v("156")]),n("br"),n("span",{staticClass:"line-number"},[t._v("157")]),n("br"),n("span",{staticClass:"line-number"},[t._v("158")]),n("br"),n("span",{staticClass:"line-number"},[t._v("159")]),n("br"),n("span",{staticClass:"line-number"},[t._v("160")]),n("br"),n("span",{staticClass:"line-number"},[t._v("161")]),n("br"),n("span",{staticClass:"line-number"},[t._v("162")]),n("br"),n("span",{staticClass:"line-number"},[t._v("163")]),n("br"),n("span",{staticClass:"line-number"},[t._v("164")]),n("br"),n("span",{staticClass:"line-number"},[t._v("165")]),n("br"),n("span",{staticClass:"line-number"},[t._v("166")]),n("br"),n("span",{staticClass:"line-number"},[t._v("167")]),n("br"),n("span",{staticClass:"line-number"},[t._v("168")]),n("br"),n("span",{staticClass:"line-number"},[t._v("169")]),n("br"),n("span",{staticClass:"line-number"},[t._v("170")]),n("br"),n("span",{staticClass:"line-number"},[t._v("171")]),n("br"),n("span",{staticClass:"line-number"},[t._v("172")]),n("br"),n("span",{staticClass:"line-number"},[t._v("173")]),n("br"),n("span",{staticClass:"line-number"},[t._v("174")]),n("br"),n("span",{staticClass:"line-number"},[t._v("175")]),n("br"),n("span",{staticClass:"line-number"},[t._v("176")]),n("br"),n("span",{staticClass:"line-number"},[t._v("177")]),n("br"),n("span",{staticClass:"line-number"},[t._v("178")]),n("br"),n("span",{staticClass:"line-number"},[t._v("179")]),n("br"),n("span",{staticClass:"line-number"},[t._v("180")]),n("br"),n("span",{staticClass:"line-number"},[t._v("181")]),n("br"),n("span",{staticClass:"line-number"},[t._v("182")]),n("br"),n("span",{staticClass:"line-number"},[t._v("183")]),n("br"),n("span",{staticClass:"line-number"},[t._v("184")]),n("br"),n("span",{staticClass:"line-number"},[t._v("185")]),n("br"),n("span",{staticClass:"line-number"},[t._v("186")]),n("br"),n("span",{staticClass:"line-number"},[t._v("187")]),n("br"),n("span",{staticClass:"line-number"},[t._v("188")]),n("br"),n("span",{staticClass:"line-number"},[t._v("189")]),n("br"),n("span",{staticClass:"line-number"},[t._v("190")]),n("br"),n("span",{staticClass:"line-number"},[t._v("191")]),n("br"),n("span",{staticClass:"line-number"},[t._v("192")]),n("br"),n("span",{staticClass:"line-number"},[t._v("193")]),n("br"),n("span",{staticClass:"line-number"},[t._v("194")]),n("br"),n("span",{staticClass:"line-number"},[t._v("195")]),n("br"),n("span",{staticClass:"line-number"},[t._v("196")]),n("br"),n("span",{staticClass:"line-number"},[t._v("197")]),n("br"),n("span",{staticClass:"line-number"},[t._v("198")]),n("br"),n("span",{staticClass:"line-number"},[t._v("199")]),n("br"),n("span",{staticClass:"line-number"},[t._v("200")]),n("br"),n("span",{staticClass:"line-number"},[t._v("201")]),n("br"),n("span",{staticClass:"line-number"},[t._v("202")]),n("br"),n("span",{staticClass:"line-number"},[t._v("203")]),n("br")])]),n("h3",{attrs:{id:"测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('int main(void) {\n\tstring data = "0,1,2,3,#,#,4,#,5,#,6,";\n\t/*\n\t\t\t 0\n\t\t1          2\n\t  3   #      #   4\n     # 5            # 6\n\t*/\n\tBinaryTree<int> tree(data);\n\n\tcout << "先序 迭代："; tree.preOrderDFS1();//0135246\n\tcout << endl;\n\tcout << "先序 递归："; tree.preOrderDFS2();//0135246\n\tcout << endl;\n\n\tcout << "中序 迭代："; tree.inOrderDFS1();//3510246\n\tcout << endl;\n\tcout << "中序 递归："; tree.inOrderDFS2();//3510246\n\tcout << endl;\n\n\tcout << "后序 迭代："; tree.postOrderDFS1();//5316420\n\tcout << endl;\n\tcout << "后序 递归："; tree.postOrderDFS2();//5316420\n\tcout << endl;\n\n\tcout << "广度优先 迭代："; tree.BFS();//0123456\n\tcout << endl;\n\treturn 0;\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br")])])])}),[],!1,null,null,null);s.default=r.exports}}]);