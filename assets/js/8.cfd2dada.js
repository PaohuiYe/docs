(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{359:function(t,n,s){"use strict";s.r(n);var a=s(42),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("[TOC]")]),t._v(" "),s("h2",{attrs:{id:"_21、栈的压入、弹出序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21、栈的压入、弹出序列"}},[t._v("#")]),t._v(" 21、栈的压入、弹出序列")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("KEY")])]),t._v(" "),s("p",[t._v("①不断入栈，判断栈顶元素是否等于出栈序列第一个元素")]),t._v(" "),s("p",[t._v("​\t②等于：出栈，出栈序列删除第一个，判断栈顶元素是否等于出栈序列第一个元素")]),t._v(" "),s("p",[t._v("​\t\t等于：goto ②")]),t._v(" "),s("p",[t._v("​\t\t不等于：goto ①")]),t._v(" "),s("p",[t._v("​\t不等于：goto ①")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\n\tbool IsPopOrder(vector<int> pushV, vector<int> popV) {\n\t\tif (pushV.empty()) return false;\n\t\tstack<int> stk;\n\t\tfor (auto x : pushV) {\n\t\t\tstk.push(x);//入栈\n\t\t\t//栈顶元素是出栈序列第一个 且栈非空 且出栈序列非空\n             while (!stk.empty() && !popV.empty() && stk.top() == popV.front()) \t\t\t{\n\t\t\t\tstk.pop();//出栈\n\t\t\t\tpopV.erase(popV.begin());//出栈序列删除第一个\n\t\t\t}\n\t\t}\n\t\treturn stk.empty();\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_22、从上往下打印二叉树-bfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22、从上往下打印二叉树-bfs"}},[t._v("#")]),t._v(" 22、从上往下打印二叉树（bfs）")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("从上往下打印出二叉树的每个节点，同层节点从左至右打印（bfs二叉树）")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("struct TreeNode {\n\tint val;\n\tstruct TreeNode *left;\n\tstruct TreeNode *right;\n\tTreeNode(int x) :\n\t\tval(x), left(NULL), right(NULL) {\n\t}\n};\n\nclass Solution {\npublic:\n\tvector<int> PrintFromTopToBottom(TreeNode* root) {\n\t\treturn bfs(root);\n\t}\n\tvector<int> bfs(TreeNode *pRoot) {\n\t\tvector<int> ret;\n\t\tif (!pRoot) return ret;\n\t\tqueue<TreeNode *> q;\n\t\tq.push(pRoot);\n\t\twhile (!q.empty()) {\n\t\t\tTreeNode *p = q.front();\n\t\t\tq.pop();\n\t\t\tret.push_back(p->val);\n\t\t\tif (p->left) q.push(p->left);\n\t\t\tif (p->right)q.push(p->right);\n\t\t}\n\t\treturn ret;\n\t}\t\t\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_23、二叉搜索树的后序遍历序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23、二叉搜索树的后序遍历序列"}},[t._v("#")]),t._v(" 23、二叉搜索树的后序遍历序列")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("KEY")])]),t._v(" "),s("p",[t._v("BST的后序序列的合法序列是，对于一个序列S，最后一个元素是x （也就是根），如果去掉最后一个元素的序列为T，那么T满足：T可以分成两段，前一段（左子树）小于x，后一段（右子树）大于x，且这两段（子树）都是合法的后序序列。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tbool VerifySquenceOfBST(vector<int> s) {\n\t\tif (s.empty()) return false;\n\t\treturn solve(s);\n\n\t}\n\tbool solve(vector<int> s) {\n\t\tif (s.size() <= 1) return true;\n\t\tint currentRoot = s.back();//取最后一个元素\n\t\ts.erase(s.end() - 1);//删除最后一个元素\n\n\t\tvector<int>::iterator loc = s.end();//用于记录第一个大于currentRoot的元素位置\n        //遍历剩下的序列\n\t\tfor (vector<int>::iterator i = s.begin(); i != s.end(); i++) {\n\t\t\tif (*i > currentRoot) {//遇到第一个大于currentRoot的\n\t\t\t\tloc = i;\n                //从或则个元素开始必须都大于currentRoot\n\t\t\t\tfor (vector<int>::iterator j = i + 1; j != s.end(); j++)\n\t\t\t\t\tif (*j < currentRoot) return false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvector<int> left(distance(s.begin(), loc));//左边序列 长度为begin~loc\n\t\tvector<int> right(distance(loc, s.end()));//右边序列 loc~end\n\t\tcopy(s.begin(), loc, left.begin());\n\t\tcopy(loc, s.end(), right.begin());\n\t\treturn solve(right) && solve(left);\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_24、二叉树中和为某一值的路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24、二叉树中和为某一值的路径"}},[t._v("#")]),t._v(" 24、二叉树中和为某一值的路径")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("p",[t._v("方法一：用sum记录每个点的值，用path记录每个路径")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tvector<vector<int>> res;\n\tint expectNumber;\n\tvector<vector<int> > FindPath(TreeNode* root, int expectNumber) {\n\t\tthis->expectNumber = expectNumber;\n\t\tpreOrderDFS(root, int(0), vector<int>());\n\t\treturn res;\n\t}\n\tvoid preOrderDFS(TreeNode *root, int sum, vector<int> path) {\n\t\tif (root) {\n\t\t\tsum += root->val;\n\t\t\tif (sum > expectNumber) return;//和已经大于期望 不在遍历左右子树\n\t\t\telse if (sum < expectNumber) path.push_back(root->val);//和小于预期 添加到路径记录向量path中\n\t\t\telse if (sum == expectNumber) {\n\t\t\t\tif (root->left || root->right) return;//等于期望但不是叶子结点\n\t\t\t\tpath.push_back(root->val);\n\t\t\t\tres.push_back(path);//和等于预期 将path添加到res\n\n\t\t\t}\n\t\t\tif (root->left) preOrderDFS(root->left, sum, path);\n\t\t\tif (root->right) preOrderDFS(root->right, sum, path);\n\n\t\t}\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br")])]),s("p",[t._v("方法二：搜索过程中让"),s("code",[t._v("expectNumber")]),t._v("减去每个点的值，递归回退时，移除path最后一个元素")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tvector<vector<int>> res;\n\tvector<int> path;\n\tvector<vector<int> > FindPath(TreeNode* root, int expectNumber) {\n\t\tif (root == NULL) return res;\n\t\tpath.push_back(root->val);\n\t\texpectNumber -= root->val;\n\t\tif (expectNumber == 0 && root->left == NULL && root->right == NULL)\n\t\t\tres.push_back(vector<int>(path));\n\t\tFindPath(root->left, expectNumber);\n\t\tFindPath(root->right, expectNumber);\n\t\t\n\t\tpath.erase(path.end() - 1);\n\t\treturn res;\n\t}\n\t\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_25、复杂链表的复制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25、复杂链表的复制"}},[t._v("#")]),t._v(" 25、复杂链表的复制")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目描述")])]),t._v(" "),s("p",[t._v("输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tRandomListNode* Clone(RandomListNode* pHead)\n\t{\n\t\tif (!pHead) return NULL;\n\t\tvector<int> v;\n\t\t//先创建不包含random的拷贝链表，同时记录pHead每个节点的random位置\n\t\tRandomListNode *head = new RandomListNode(pHead->label);\n\t\tv.push_back(ListNodeLoc(pHead, pHead->random));\n\t\tRandomListNode* pHeadtemp = pHead;\n\t\tRandomListNode* headTemp = head;\n\t\twhile (pHeadtemp->next) {\n\t\t\theadTemp->next = new RandomListNode(pHeadtemp->next->label);\n\t\t\tv.push_back(ListNodeLoc(pHead, pHeadtemp->next->random));\n\t\t\tpHeadtemp = pHeadtemp->next;\n\t\t\theadTemp = headTemp->next;\n\t\t}\t\t\n\t\t//给拷贝链表添加random信息\n\t\tint i = 0;\n\t\tfor (RandomListNode *temp = head; temp != NULL; temp = temp->next) {\n\t\t\ttemp->random = ListNodeAt(head, v.at(i++));\n\t\t}\n\n\t\treturn head;\n\t}\n\t//返回node在链表的位置\n\tint ListNodeLoc(RandomListNode *pHead, RandomListNode * node) {\n\t\tRandomListNode *temp = pHead;\n\t\tint loc;\n\t\tfor (temp = pHead, loc = 0; temp != NULL; temp = temp->next, loc++) {\n\t\t\tif (temp == node) return loc;\n\t\t}\n\t\treturn -1;\n\t}\n\t//返回在位置loc的节点\n\tRandomListNode *ListNodeAt(RandomListNode *pHead, int loc) {\n\t\tRandomListNode *temp = pHead;\n\t\tint cnt;\n\t\tfor (temp = pHead, cnt = 0; temp != NULL; temp = temp->next, cnt++) {\n\t\t\tif (cnt == loc) return temp;\n\t\t}\n\t\treturn NULL;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br")])]),s("p",[t._v("方法二：")]),t._v(" "),s("p",[t._v("步骤一：在原始链表每个节点后面插入一个相同的节点")]),t._v(" "),s("p",[t._v("步骤二：遍历链表给新节点random赋值")]),t._v(" "),s("p",[t._v("步骤三：拆分链表")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tRandomListNode* Clone(RandomListNode* pHead)\n\t{\n\t\tif (!pHead) return NULL;\n\t\tRandomListNode *pHeadTemp = pHead;\n\t\t/*在每个节点后插入一自己相同的一个节点*/\n\t\twhile (pHeadTemp) {\n\t\t\tRandomListNode *Temp = pHeadTemp->next;\n\t\t\tpHeadTemp->next = new RandomListNode(pHeadTemp->label);\n\t\t\tpHeadTemp->next->next = Temp;\n\t\t\tpHeadTemp = Temp;\n\t\t}\n\t\t/*赋值random*/\n\t\tpHeadTemp = pHead;\n\t\twhile (pHeadTemp) {\n\n\t\t\tpHeadTemp->next->random = pHeadTemp->random ? (pHeadTemp->random->next) : NULL;\n\t\t\tpHeadTemp = pHeadTemp->next->next;\n\t\t}\n\t\t/*拆分*/\n\t\tpHeadTemp = pHead;\n\t\tRandomListNode *ret = pHead->next;\t\t\n\t\twhile (pHeadTemp->next) {\n\t\t\tRandomListNode *temp = pHeadTemp->next;\n\t\t\tpHeadTemp->next = pHead->next->next;\n\t\t\tpHeadTemp = temp;\t\t\t\n\t\t}\n\t\treturn ret;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("测试代码")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('int main()\n{\n    RandomListNode *phead = new RandomListNode(1);\n\t\n    phead->next = new RandomListNode(3);\n    phead->next->next = new RandomListNode(5);\n    phead->next->next->next = new RandomListNode(5);\n    phead->next->next->next->next = new RandomListNode(2);\n\n    /*phead->random = phead->next->next;\n        phead->next->random = phead->next->next->next->next;\n        phead->next->next->random = phead->next->next->next;\n        phead->next->next->next->random = NULL;\n        phead->next->next->next->next->random = NULL;*/\n    for (RandomListNode *Temp = phead; Temp != NULL;) {\n        cout << Temp->label << "  ";\n        if (Temp->random) cout << Temp->random->label;\n        else cout << "#";\n        cout << " | ";\n        Temp = Temp->next;\n    }\n    Solution s;\n    RandomListNode *cop =  s.Clone(phead);\n    cout << endl;\n    for (RandomListNode *Temp = phead; Temp != NULL;) {\n        cout << Temp->label << "  ";\n        if (Temp->random) cout << Temp->random->label;\n        else cout << "#";\n        cout << " | ";\n        Temp = Temp->next;\n    }\n    cout << endl;\n    for (RandomListNode *Temp = cop; Temp != NULL;) {\n        cout << Temp->label << "  ";\n        if (Temp->random) cout << Temp->random->label;\n        else cout << "#";\n        cout << " | ";\n        Temp = Temp->next;\n\t}\n}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_26、二叉搜索树与双向链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26、二叉搜索树与双向链表"}},[t._v("#")]),t._v(" 26、二叉搜索树与双向链表")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("p",[t._v("方法一：要一个标记表示返回链表的头还是尾")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tTreeNode* Convert(TreeNode* pRootOfTree)\n\t{\n\t\tif (!pRootOfTree) return NULL;\n\t\tTreeNode *prevmax = convert(pRootOfTree->left, true);\n\t\tTreeNode *nextmin = convert(pRootOfTree->right, false);\n\t\tif (prevmax)\n\t\t{\n\t\t\tprevmax->right = pRootOfTree;\n\t\t\tpRootOfTree->left = prevmax;\n\t\t}\n\t\tif (nextmin) {\t\t\t\t\t\t\t\t\n\t\t\tnextmin->left = pRootOfTree;\n\t\t\tpRootOfTree->right = nextmin;\n\t\t}\n\t\tTreeNode * min = pRootOfTree;\t\t\n\t\twhile (min->left) min = min->left;\t\t\n\t\treturn min;\n\t}\n\tTreeNode* convert(TreeNode* currentRoot, bool needMax) {\n\t\tif (!currentRoot) return NULL;\n\t\tTreeNode *prevmax = convert(currentRoot->left, true);\n\t\tTreeNode *nextmin = convert(currentRoot->right, false);\n\t\tif (prevmax)\n\t\t{\n\t\t\tprevmax->right = currentRoot;\n\t\t\tcurrentRoot->left = prevmax;\n\t\t}\t\t\t\n\t\tif (nextmin) {\n\t\t\tnextmin->left = currentRoot;\n\t\t\tcurrentRoot->right = nextmin;\n\t\t}\n\t\tif (needMax) {\n\t\t\tTreeNode *max = currentRoot;\n\t\t\twhile (max->right) max = max->right;\n\t\t\treturn max;\n\t\t}\n\t\telse {\n\t\t\tTreeNode *min = currentRoot;\n\t\t\twhile (min->left) min = min->left;\n\t\t\treturn min;\n\t\t}\n\t\t\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br")])]),s("p",[t._v("方法二（改进）：")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\t\n\tTreeNode* Convert(TreeNode* pRootOfTree)//返回排序后的链表头\n\t{\n\t\tif (!pRootOfTree) return NULL;\n\t\tTreeNode *prev = Convert(pRootOfTree->left);//递归左子树\n\t\tTreeNode *next = Convert(pRootOfTree->right);//递归右子树\n\t\t\n\t\tif (prev)//非空 \n\t\t{\n\t\t\t//找到做链表的尾\n\t\t\tTreeNode *prevmax = prev;\n\t\t\twhile (prevmax->right) prevmax = prevmax->right;\n\t\t\t//尾与根连接\n\t\t\tprevmax->right = pRootOfTree;\n\t\t\tpRootOfTree->left = prevmax;\n\t\t}\n\t\tif (next) {//非空\n\t\t\t//头与根连接\n\t\t\tnext->left = pRootOfTree;\n\t\t\tpRootOfTree->right = next;\n\t\t}\n\t\t//返回连接后整个链表的头\n\t\tTreeNode * min = pRootOfTree;\t\n\t\twhile (min->left) min = min->left;\t\t\n\t\treturn min;\n\t}\t\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_27、字符串的排列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27、字符串的排列"}},[t._v("#")]),t._v(" 27、字符串的排列")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。")]),t._v(" "),s("p",[t._v("输入描述：输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("blockquote",[s("p",[t._v("递归算法")]),t._v(" "),s("p",[t._v("对于无重复值的情况：")]),t._v(" "),s("p",[t._v("固定第一个字符，递归取得首位后面的各种字符串组合；")]),t._v(" "),s("p",[t._v("再把第一个字符与后面每一个字符交换，并同样递归获得首位后面的字符串组合；")]),t._v(" "),s("p",[t._v("假如有重复值：")]),t._v(" "),s("p",[t._v("已经交换到第一个的就不在交换了")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('class Solution {\npublic:\n\t\n\tvector<string> Permutation(string str) {\n\t\tvector<string> res;\t\t\n\t\tif (str == "") return res;\n\t\tif (str.size() == 1) return vector<string>{str};\n\t\tvector<char> record;\n\t\tfor (int i = 0; i < str.size(); i++) {\n\t\t\tif (find(record.begin(), record.end(), str.at(i)) != record.end())\n\t\t\t\tcontinue;\n\t\t\trecord.push_back(str.at(i));\n\t\t\tswap(str, 0, i);\n\t\t\tvector<string> backPermutation = Permutation(str.substr(1, str.size() - 1));\n\t\t\tfor (auto x : backPermutation) \n\t\t\t\tres.push_back(str.at(0) + x);\n\t\t}\n\t\trecord.clear();\n\t\treturn res;\n\t}\t\n\tvoid swap(string &s, int firstLoc, int secondLoc) {\t\t\n\t\tchar temp = s.at(firstLoc);\n\t\ts.at(firstLoc) = s.at(secondLoc);\n\t\ts.at(secondLoc) = temp;\n\t\n\t}\n};\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br")])]),s("p",[t._v("STL "),s("code",[t._v("next_permutation")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('class Solution {\npublic:\n\t\n\tvector<string> Permutation(string str) {\n\t\tif (str == "") return vector<string>();\n\t\tvector<string> res;\n\t\tdo\n\t\t{\n\t\t\tres.push_back(str);\n\t\t} while (next_permutation(str.begin(), str.end()));\n\t\t\n\t\treturn res;\n\t}\t\n};\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("自己实现"),s("code",[t._v("nextPermutation")])]),t._v(" "),s("blockquote",[s("p",[t._v("可参考解析： http://www.cnblogs.com/pmars/archive/2013/12/04/3458289.html  （感谢作者）")]),t._v(" "),s("p",[t._v("一个全排列可看做一个字符串，字符串可有前缀、后缀。")]),t._v(" "),s("p",[t._v("生成给定全排列的下一个排列.所谓一个的下一个就是这一个与下一个之间没有其他的。")]),t._v(" "),s("p",[t._v("这就要求这一个与下一个有尽可能长的共同前缀，也即变化限制在尽可能短的后缀上。")]),t._v(" "),s("p",[t._v("[例]839647521是1--9的排列。1—9的排列最前面的是123456789，最后面的987654321，")]),t._v(" "),s("p",[t._v("从右向左扫描若都是增的，就到了987654321，也就没有下一个了。\n否则找出第一次出现下降的位置。")]),t._v(" "),s("p",[t._v("【例】 如何得到346987521的下一个")]),t._v(" "),s("p",[t._v("1，从尾部往前找第一个P(i-1) < P(i)的位置")]),t._v(" "),s("p",[t._v("3 4 6 9 <- 8 <- 7 <- 5 <- 2 <- 1")]),t._v(" "),s("p",[t._v("最终找到9是第一个比前一个大的，记录下9的位置i")]),t._v(" "),s("p",[t._v("2，从i位置往后找到最后一个大于i-1位置（6）的数")]),t._v(" "),s("p",[t._v("3 4 6 9 8 7 <-5 <-2 <-1")]),t._v(" "),s("p",[t._v("最终找到7，记录位置为j")]),t._v(" "),s("p",[t._v("3，交换位置i-1和j的值")]),t._v(" "),s("p",[t._v("3 4 7 9 8 6 5 2 1")]),t._v(" "),s("p",[t._v("4，翻转位置i开始到最后的元素")]),t._v(" "),s("p",[t._v("3 4 7 1 2 5 6 8 9")]),t._v(" "),s("p",[t._v("则346987521的下一个排列")]),t._v(" "),s("p",[t._v("为347125689")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('lass Solution {\npublic:\t\n\tvector<string> Permutation(string str) {\n\t\tif (str == "") return vector<string>();\n\t\tvector<string> res;\n\t\tdo\n\t\t{\n\t\t\tres.push_back(str);\n\t\t} while (nextPermutation(str));\n\t\t\n\t\treturn res;\n\t}\n\tbool  nextPermutation(string &str) {\t\t\n\t\tfor (int i = str.size() - 1; i > 0; i--) {\n\t\t\tif (str.at(i) > str.at(i - 1)) {//找到第一个比前一个大的 是i\n\t\t\t\tfor (int j = str.size() - 1; j >= i; j--) {\n\t\t\t\t\tif (str.at(j) > str.at(i - 1)) {//找到最后一个比i-1大的\n\t\t\t\t\t\tswap(str, i - 1, j);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\treverse(str.begin() + i, str.end());//将i开始往后的元素翻转\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tvoid swap(string &s, int firstLoc, int secondLoc) {\t\t\n\t\tchar temp = s.at(firstLoc);\n\t\ts.at(firstLoc) = s.at(secondLoc);\n\t\ts.at(secondLoc) = temp;\n\t\n\t}\n};\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_28、数组中出现次数超过一半的数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28、数组中出现次数超过一半的数字"}},[t._v("#")]),t._v(" 28、数组中出现次数超过一半的数字")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("p",[t._v("**方法一：**对"),s("code",[t._v("numbers")]),t._v("排序，如果存在，则位于中间的数字就是返回值")]),t._v(" "),s("p",[t._v("分别从前后向中间遍历，前后都遇到中间数字时，break，以此获得mid出现的次数")]),t._v(" "),s("p",[t._v("时间复杂度O(n^2logn)，空间复杂度O(1)")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tint MoreThanHalfNum_Solution(vector<int> numbers) {\n\t\tsort(numbers.begin(), numbers.end());\n\t\tint mid = numbers.at(numbers.size() / 2);\n\t\tint count;\n\t\t//获得mid出现的次数 方法一\t\t\n\t\tpair<int, bool> front(0, false);\n\t\tpair<int, bool> back(numbers.size() - 1, false);\n\t\twhile (true) {\n\t\t\tif (numbers.at(front.first) == mid) front.second = true;\n\t\t\tif (numbers.at(back.first) == mid) back.second = true;\n\t\t\tif (front.second && back.second) break;\n\t\t\tif (!front.second) front.first++;\n\t\t\tif (!back.second) back.first--;\n\t\t}\n\t\tcount = back.first - front.first + 1;\n\t\t//获取mid出现的次数 使用STL\n\t\tcount = upper_bound(numbers.begin(), numbers.end(), mid) - lower_bound(numbers.begin(), numbers.end(), mid);\n\t\treturn count > (numbers.size() / 2) ? mid : 0;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("p",[t._v("**方法二：**遍历"),s("code",[t._v("numbers")]),t._v("，记录每个数字出现的次数，时间复杂度O(n)，空间复杂度O(n)")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tint MoreThanHalfNum_Solution(vector<int> numbers) {\n\t\tmap<int, int> m;\n\t\tint half = numbers.size() / 2;\n\t\tfor (int n : numbers) {\n\t\t\tif (m.find(n) == m.end()) \n\t\t\t\tm[n] = 1;\n\t\t\telse \n\t\t\t\tm[n]++;\t\t\t\t\t\n\t\t\tif (m[n] > half) return n;\n\t\t}\n\t\treturn 0;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("**方法三：**时间复杂度O(n)，空间复杂度O(1)")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tint MoreThanHalfNum_Solution(vector<int> numbers) {\n\t\tpair<int, int> record(numbers.front(),1);//first:数字，second:次数\n\t\tbool isSubToOne = true;\n\t\tfor (int i = 1; i < numbers.size();i++) {\n\t\t\tif (numbers.at(i) == record.first) \n\t\t\t\trecord.second++;\t\t\t\t \t\t\t\n\t\t\telse if (record.second == 1) {\n\t\t\t\trecord.first = numbers.at(i);\n\t\t\t\tisSubToOne = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\trecord.second--;\n\t\t\t\tisSubToOne = true;\n\t\t\t}\n\t\t}\t\t\n\t\tif (record.second > 1) return record.first;\n\t\tif (record.second == 1 && isSubToOne)  return record.first;\n\t\treturn 0;\n\t}\n\t\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_29、最小的k个数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29、最小的k个数"}},[t._v("#")]),t._v(" 29、最小的K个数")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("KEY")])]),t._v(" "),s("p",[t._v("理解为最小的k个不能重复")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("p",[t._v("使用STL，排序，去重，返回前k个")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tvector<int> GetLeastNumbers_Solution(vector<int> input, int k) {\n\t\tsort(input.begin(), input.end());\n\t\tvector<int>::iterator end = unique(input.begin(), input.end());\n\t\tif (distance(input.begin(), end) < k) return vector<int>();\n\t\tinput.erase(input.begin() + k, input.end());\n\t\treturn input;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("使用大根堆存最小的k个数")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tvector<int> GetLeastNumbers_Solution(vector<int> input, int k) {\n\t\tif (input.size() < k || k == 0) return vector<int>();\n\t\tset<int,greater<int>> kMin ;//降序排列的集合\t\t\n\t\tfor (int i = 0; i < input.size(); i++) {\n\t\t\tif (kMin.size() < k)//还不足k个，直接插入\n\t\t\t\tkMin.insert(input.at(i));\n\t\t\telse if (input.at(i) < *(kMin.begin())) {//当前的小于堆最大的才替换\n\t\t\t\tkMin.erase(kMin.begin());\n\t\t\t\tkMin.insert(input.at(i));\n\t\t\t}\t\t\t\n\t\t}\n\t\treturn vector<int>(kMin.rbegin(), kMin.rend());\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_30、连续子数组的最大和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30、连续子数组的最大和"}},[t._v("#")]),t._v(" 30、连续子数组的最大和")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:")]),t._v(" "),s("p",[t._v("在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("KEY")])]),t._v(" "),s("p",[t._v("动态规划：数组a[ ]中，记sum[i]为以a[i]为结尾的数组中和最大的连续子数组，要找整个数组最大的连续子数组，只要遍历所的sum [i]，找出最大的即可。")]),t._v(" "),s("p",[t._v("根据sum [i]的定义有：\n"),s("code",[t._v("sum [i+1] =max（sum[i]+a[i+1],a[i+1])")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tint FindGreatestSumOfSubArray(vector<int> array) {\n\t\tif (array.size() == 0) return -1;\n\t\tint sum = array.at(0);\n\t\tint max_sum = sum;\n\t\tfor (int i = 1; i < array.size();i++) {\n\t\t\tsum = max(sum + array.at(i), array.at(i));\n\t\t\tif (sum > max_sum) max_sum = sum;\n\t\t}\n\t\treturn max_sum;\n\t}\n\tint max(int a, int b) {\n\t\treturn a > b ? a : b;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_31、从1到n整数中1出现的次数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31、从1到n整数中1出现的次数"}},[t._v("#")]),t._v(" 31、从1到n整数中1出现的次数")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("KEY")])]),t._v(" "),s("p",[s("strong",[t._v("个(1)位出现1的次数：")])]),t._v(" "),s("p",[t._v("个位每隔10出现1次1：01，11，21，31，...")]),t._v(" "),s("p",[t._v("对于数字n，个位出现1的次数为sum = n / 10 + k")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("if (n % 10 < 1) k = 0;\nelse if (n % 10 > 1) k = 0\nelse k = n % 10 - 1 + 1;\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("十(2)位出现1的次数：")])]),t._v(" "),s("p",[t._v("十位每隔100出现10次1：010-019，110-119，210-219，...")]),t._v(" "),s("p",[t._v("对于数字n，十位出现1的次数为sum = (n / 100) * 10 + k")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("if (n % 100 < 10) k = 0;\nelse if (n % 100 > 19) k = 10\nelse k = n % 100 - 10 + 1;\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("百(3)位出现1的次数：")])]),t._v(" "),s("p",[t._v("百位每隔1000出现100次1：0100-0199，1100-1199，2100-2199，...")]),t._v(" "),s("p",[t._v("对于数字n，百位出现1的次数为sum = (n / 1000) * 100 + k")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("if (n % 1000 < 100) k = 0;\nelse if (n % 1000 > 199) k = 100\nelse k = n % 1000 - 100 + 1;\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("归纳：")])]),t._v(" "),s("p",[s("code",[t._v("x")]),t._v("位出现1的次数：")]),t._v(" "),s("p",[s("code",[t._v("x")]),t._v("位每隔"),s("code",[t._v("step = 10^x")]),t._v("出现"),s("code",[t._v("stepNumber = 10^(x-1)")]),t._v("次"),s("code",[t._v("1")])]),t._v(" "),s("p",[t._v("对于数字"),s("code",[t._v("n")]),t._v("，"),s("code",[t._v("x")]),t._v("位出现"),s("code",[t._v("1")]),t._v("的次数为"),s("code",[t._v("sum = (n/step)*stepNumber + k")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("if (n % step < stepNumber) k = 0;\nelse if (n % step > (stepNumber * 2 - 1)) k = stepNumber;\nelse k = n % step - stepNumber + 1;\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("p",[t._v("暴力：")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tint NumberOf1Between1AndN_Solution(int n)\n\t{\n\t\tint sum = 0;\n\t\tfor (int i = 0; i <= n; i++) sum += NumberOfOneOfNumber(i);\n\t\treturn sum;\n\t}\n\tint NumberOfOneOfNumber(int x) {\n\t\tint cnt = 0;\n\t\twhile (x) {\n\t\t\tif(x%10 == 1) cnt++;\n\t\t\tx /= 10;\n\t\t}\n\t\treturn cnt;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br")])]),s("p",[t._v("归纳：")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tint NumberOf1Between1AndN_Solution(int n)\n\t{\n\t\tint num = n;\n\t\tint allSum = 0;\n\t\tfor (int x = 1; num > 0; num /= 10, x++) {\n\t\t\tint step = pow(10, x);\n\t\t\tint stepNumber = pow(10, x - 1);\n\t\t\tint k;\n\t\t\tif (n % step < stepNumber) k = 0;\n\t\t\telse if (n % step > (stepNumber * 2 - 1)) k = stepNumber;\n\t\t\telse k = n % step - stepNumber + 1;\t\t\t\n\t\t\tint sum = (n / step)*stepNumber + k;\n\t\t\tallSum += sum;\n\t\t}\n\t\treturn allSum;\n\t}\t\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_32、把数组排成最小的数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32、把数组排成最小的数"}},[t._v("#")]),t._v(" 32、把数组排成最小的数")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('class Solution {\npublic:\n\tstring PrintMinNumber(vector<int> numbers) {\t\t\n\t\tsort(numbers.begin(), numbers.end(), [](int a, int b) {\n\t\t\tstring stra = to_string(a);\n\t\t\tstring strb = to_string(b);\n\t\t\treturn stra + strb < strb + stra;\n\t\t}\n\t\t);\n\t\tstring res = "";\n\t\tfor (int x : numbers) \t\t\n\t\t\tres += to_string(x);\n\t\t\n\t\treturn res;\n\t}\n};\n\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_33、丑数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_33、丑数"}},[t._v("#")]),t._v(" 33、丑数")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("KEY")])]),t._v(" "),s("p",[t._v("一个丑数一定由另一个丑数乘以2或者乘以3或者乘以5得到，那么我们从1开始乘以2,3,5，就得到2,3,5三个丑数，在从这三个丑数出发乘以2,3,5就得到4，6，10，6，9，15，10，15，25九个丑数")]),t._v(" "),s("p",[t._v("1）array： 1\n乘2队列：2（"),s("code",[t._v("array[0]*2")]),t._v("）\n乘3队列：3（"),s("code",[t._v("array[0]*3")]),t._v("）\n乘5队列：5（"),s("code",[t._v("array[0]*5")]),t._v("）\n选择三个队列头最小的数2加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；\n（2）array：1,2\n乘2队列：4（"),s("code",[t._v("array[1]*2")]),t._v("）\n乘3队列：3（"),s("code",[t._v("array[0]*3")]),t._v("），6（"),s("code",[t._v("array[1]*3")]),t._v("）\n乘5队列：5（"),s("code",[t._v("array[0]*5")]),t._v("），10（"),s("code",[t._v("array[1]*5")]),t._v("）\n选择三个队列头最小的数3加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；\n（3）array：1,2,3\n乘2队列：4（"),s("code",[t._v("array[1]*2")]),t._v("）,6（"),s("code",[t._v("array[2]*2")]),t._v("）\n乘3队列：6（"),s("code",[t._v("array[1]*3")]),t._v("）,9（"),s("code",[t._v("array[2]*3")]),t._v("）\n乘5队列：5（"),s("code",[t._v("array[0]*5")]),t._v("）,10（"),s("code",[t._v("array[1]*5")]),t._v("）,15（"),s("code",[t._v("array[2]*5")]),t._v("）\n选择三个队列头里最小的数4加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；链接：ht")]),t._v(" "),s("p",[t._v("（4）丑数数组：1,2,3,4\n乘2队列：6（"),s("code",[t._v("array[2]*2")]),t._v("），8（"),s("code",[t._v("array[3]*2")]),t._v("）\n乘3队列：6（"),s("code",[t._v("array[1]*3")]),t._v("），9（"),s("code",[t._v("array[2]*3")]),t._v("），12（"),s("code",[t._v("array[3]*3")]),t._v("）\n乘5队列：5（"),s("code",[t._v("array[0]*5")]),t._v("），10（"),s("code",[t._v("array[1]*5")]),t._v("），15（"),s("code",[t._v("array[2]*5")]),t._v("），20（"),s("code",[t._v("array[3]*5")]),t._v("）\n选择三个队列头里最小的数5加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；")]),t._v(" "),s("p",[t._v("......")]),t._v(" "),s("p",[t._v("可以看出，每次从每个队列头取最小的加入到"),s("code",[t._v("array")]),t._v("，而每次最小的三个数分别是：")]),t._v(" "),s("p",[t._v("第一次："),s("code",[t._v("array[1]*2")]),t._v("，"),s("code",[t._v("array[1]*3")]),t._v("，"),s("code",[t._v("array[1]*5")]),t._v("；下标为0,0,0")]),t._v(" "),s("p",[t._v("第二次："),s("code",[t._v("array[2]*2")]),t._v("，"),s("code",[t._v("array[1]*3")]),t._v("，"),s("code",[t._v("array[1]*5")]),t._v("；下标为1,0,0")]),t._v(" "),s("p",[t._v("第三次："),s("code",[t._v("array[2]*2")]),t._v("，"),s("code",[t._v("array[2]*3")]),t._v("，"),s("code",[t._v("array[1]*5")]),t._v("；下标为1,1,0")]),t._v(" "),s("p",[t._v("因此使用三个变量"),s("code",[t._v("p2,p3,p5")]),t._v("记录下标")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tint GetUglyNumber_Solution(int index) {\n\t\tif (index == 0) return 0;\t\t\n\t\tint p2 = 0, p3 = 0, p5 = 0, newNum = 1;\n\t\tvector<int> uglyList;\n\t\tuglyList.push_back(newNum);\n\t\twhile (uglyList.size() < index) {\n\t\t\tint head2 = uglyList[p2] * 2;\n\t\t\tint head3 = uglyList[p3] * 3;\n\t\t\tint head4 = uglyList[p5] * 5;\n\t\t\t//选出三个队列头最小的数\n\t\t\tnewNum = min(head2, min(head3, head4));\n\t\t\t//可能进入一个或者多个，进入多个是三个队列头最小的数有多个的情况\n\t\t\tif (head2 == newNum) p2++;\n\t\t\tif (head3 == newNum) p3++;\n\t\t\tif (head4 == newNum) p5++;\n\t\t\tuglyList.push_back(newNum);\n\t\t}\n\t\treturn newNum;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_34、第一个只出现一次的字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_34、第一个只出现一次的字符"}},[t._v("#")]),t._v(" 34、第一个只出现一次的字符")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("在一个字符串(0<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("p",[t._v("使用vector，记录字符与所在位置，")]),t._v(" "),s("p",[t._v("如果已经存在，位置置为-1，")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\n\ttypedef pair<char, int> mypair;\npublic:\n\n\tint FirstNotRepeatingChar(string str) {\t\n\t\tif (str.size() == 0) return -1;\t\t\n\t\tvector<mypair> v;\t\t\n\t\tfor (int i = 0; i < str.size(); i++) {\n\t\t\tchar cur = str.at(i);\t\t\t\t\t\t\n\t\t\tvector<mypair>::iterator findRes = find_if(v.begin(), v.end(), [&cur](mypair x) {\n\t\t\t\treturn x.first == cur ? true : false;\n\t\t\t});\n\t\t\tif (findRes == v.end())//没找到，添加\n\t\t\t\tv.push_back(mypair(cur, i));\n\t\t\telse (*findRes).second = -1;//找到了相同的，位置置为-1\t\t\t\t\t\t\t\t\n\t\t}\n\t\tfor (auto x : v) {\n\t\t\tif (x.second >= 0) return x.second;\n\t\t}\n\t\treturn -1;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("p",[t._v("使用map，记录每种字符出现的次数：")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tint FirstNotRepeatingChar(string str) {\n\t\tmap<char, int> mp;//默认int为0\n\t\tfor(auto c:str)\n\t\t\tmp[c]++;\n\t\tfor (int i = 0; i < str.size(); ++i) {\n\t\t\tif (mp[str[i]] == 1)\n\t\t\t\treturn i;\n\t\t}\n\t\treturn -1;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("使用数组，位置对应字符，记录每种字符出现的次数：")]),t._v(" "),s("p",[t._v("A-Z对应的ASCII码为65-90，a-z对应的ASCII码值为97-122，数组长度为122-65+1=58")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tint FirstNotRepeatingChar(string str) {\n\t\tvector<int> v(58,0);\n\t\tfor (char c : str) {\n\t\t\tv.at(c - 65)++;\n\t\t}\n\t\tfor (int i = 0; i < str.size(); i++)\n\t\t\tif (v.at(str.at(i) - 65) == 1)\n\t\t\t\treturn i;\n\t\treturn -1;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_35、数组中的逆序对"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_35、数组中的逆序对"}},[t._v("#")]),t._v(" 35、数组中的逆序对")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("p",[t._v("（1）从后往前遍历。将前面的排序。从找到第一个不大于遍历点的。")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int InversePairs(vector<int> data) {\n\t\tint P = 0;\n\t\tfor (int i = data.size() - 1; i > 0; i--)\n\t\t{\n\t\t\tint cur = data.at(i);\n\t\t\tvector<int> pre(data.begin(), data.begin() + i);\n\t\t\tsort(pre.begin(), pre.end());\n\t\t\tfor (vector<int>::reverse_iterator it = pre.rbegin(); it != pre.rend(); it++) {\n\t\t\t\tif (*it > cur) P++;\n\t\t\t\telse break;\n\t\t\t}\n\n\t\t}\n\t\treturn P% 1000000007;\n\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("（2）暴力循环O(n^2^）：")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int InversePairs(vector<int> data) {\n    int P = 0;\n    for (int i = 0; i < data.size(); i++)\t\t\n    for (int j = i+1; j < data.size(); j++)\t\t\t\n    if (data.at(i) > data.at(j)) P++;\n    return P % 1000000007;\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("（3）归并排序时统计O(nlog~2~n)")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/*合并时创建辅助向量*/\nclass Solution {\npublic:\t\n\tvoid Merge(vector<int> &v, int low, int mid, int high) {\t\t\n\t\tvector<int> copy(v.begin() + low, v.begin() + high + 1);\n\t\tint leftNum = mid - low + 1;\n\t\tint allNum = high - low + 1;\n\t\tint i = 0, j = leftNum, k = low;\n\t\twhile (i < leftNum && j < allNum) {\n\t\t\tif (copy.at(i) <= copy.at(j)) {\t\t\t\t\n\t\t\t\tv.at(k++) = copy.at(i++);\t\t\t\t\n\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\telse {\t\t\t\n\t\t\t\tv.at(k++) = copy.at(j++);\n\t\t\t\tP += (leftNum - i);\n\t\t\t\tif (P >= 1000000007) P -= 1000000007;\n\t\t\t}\t\t\t\t\n\t\t}\n\t\twhile (i < leftNum) v.at(k++) = copy.at(i++);\n\t\twhile (j < allNum) v.at(k++) = copy.at(j++);\n\t}\n\tvoid MergeSort(vector<int> &data, int low, int high) {\n\t\tif (low < high) {\n\t\t\tint mid = (low + high) / 2;\n\t\t\tMergeSort(data, low, mid);\n\t\t\tMergeSort(data, mid + 1, high);\n\t\t\tMerge(data, low, mid, high);\n\t\t}\n\t}\n\tint InversePairs(vector<int> data) {\n\t\tMergeSort(data, 0, data.size() - 1);\n\t\treturn P;\n\t}\n\tint P=0;\t\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br")])]),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/*创建全局辅助向量*/\nclass Solution {\npublic:\n\tvoid Merge(vector<int> &v, int low, int mid, int high) {\n\t\tfor (int i = low; i <= high; i++)\n\t\t\tcopy->at(i) = v.at(i);\n\t\tint i = low, j = mid + 1, k = low;\n\t\twhile (i <= mid && j <= high) {\n\t\t\tif (copy->at(i) <= copy->at(j))\n\t\t\t\tv.at(k++) = copy->at(i++);\n\t\t\telse {\n\t\t\t\tv.at(k++) = copy->at(j++);\n\t\t\t\tP += (mid - i + 1);\n\t\t\t\tif (P >= 1000000007) P -= 1000000007;\n\t\t\t}\n\n\t\t}\n\t\twhile (i <= mid) v.at(k++) = copy->at(i++);\n\t\twhile (j <= high) v.at(k++) = copy->at(j++);\n\t}\n\tvoid MergeSort(vector<int> &data, int low, int high) {\n\t\tif (low < high) {\n\t\t\tint mid = (low + high) / 2;\n\t\t\tMergeSort(data, low, mid);\n\t\t\tMergeSort(data, mid + 1, high);\n\t\t\tMerge(data, low, mid, high);\n\t\t}\n\t}\n\tint InversePairs(vector<int> data) {\n\t\tcopy = new vector<int>(data.size()*2);\n\t\tMergeSort(data, 0, data.size() - 1);\n\t\treturn P;\n\t}\n\t~Solution(){\n\t\tdelete copy;\n\t}\n\tint P = 0;\n\tvector<int> *copy;\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_36、两个链表的第一个公共结点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_36、两个链表的第一个公共结点"}},[t._v("#")]),t._v(" 36、两个链表的第一个公共结点")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("输入两个链表，找出它们的第一个公共结点。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("p",[t._v("（1）")]),t._v(" "),s("p",[t._v("遍历第一个链表，把地址记录；")]),t._v(" "),s("p",[t._v("遍历第二个，在记录中查找；")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tListNode* FindFirstCommonNode(ListNode* pHead1, ListNode* pHead2) {\t\t\n\t\tif (!pHead1 || !pHead2) return NULL;\n\t\tListNode *p1 = pHead1;\n\t\tListNode *p2 = pHead2;\n\t\tvector<ListNode*> v;\n\t\twhile (p1) {\n\t\t\tv.push_back(p1);\t\t\t\n\t\t\tp1 = p1->next;\n\t\t}\n\t\twhile (p2) {\n\t\t\tif (find(v.begin(), v.end(), p2) != v.end()) return p2;\n\t\t\tp2 = p2->next;\n\t\t}\n\t\treturn NULL;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("p",[t._v("（2）")]),t._v(" "),s("p",[t._v("获取两个链表的长度；")]),t._v(" "),s("p",[t._v("长的先走dif步；")]),t._v(" "),s("p",[t._v("一起走；")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tListNode* FindFirstCommonNode(ListNode* pHead1, ListNode* pHead2) {\t\t\n\t\tif (!pHead1 || !pHead2) return NULL;\n\t\tListNode *p1 = pHead1;\n\t\tListNode *p2 = pHead2;\t\t\n\t\tint length1 = 0, length2 = 0;\n\t\t//获取两个链表的长度\n\t\twhile (p1) {\n\t\t\tlength1++;\n\t\t\tp1 = p1->next;\n\t\t}\n\t\twhile (p2) {\n\t\t\tlength2++;\n\t\t\tp2 = p2->next;\n\t\t}\n\t\t//长的先走dif步\n\t\tint dif = abs(length1 - length2);\n\t\tp1 = pHead1;\n\t\tp2 = pHead2;\n\t\tif (length1 > length2) \n\t\t\twhile (dif--) p1 = p1->next;\t\t\n\t\telse \n\t\t\twhile (dif--) p2 = p2->next;\t\n\t\t//一起走\n\t\twhile (p1 && p2) {\n\t\t\tif (p1 == p2) return p1;\n\t\t\tp1 = p1->next;\n\t\t\tp2 = p2->next;\n\t\t}\n\t\treturn NULL;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_37、数字在排序数组中出现的次数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_37、数字在排序数组中出现的次数"}},[t._v("#")]),t._v(" 37、数字在排序数组中出现的次数")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")]),t._v("\n统计一个数字在排序数组中出现的次数。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("p",[t._v("方法一：二分查找到目标数，从这个位置开始向前后计数")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tint GetNumberOfK(vector<int> data, int k) {\n\t\tif (data.size() == 0) return 0;\n\t\tint l = 0, r = data.size() - 1, mid;\t\t\n\t\twhile (l<=r)\n\t\t{\n\t\t\tmid = (l + r) / 2;\n\t\t\tif (data.at(mid) == k) break;\n\t\t\telse if (data.at(mid) < k)  l = mid + 1;\t\t\t\n\t\t\telse r = mid - 1;\n\t\t}\n\t\tint res = 0;\n\t\tif (data.at(mid) == k) {\n\t\t\tfor (int i = mid - 1; i >= 0 && data.at(i) == k; i--)\n\t\t\t\tres++;\n\t\t\tfor (int i = mid; i <data.size() && data.at(i) == k; i++)\n\t\t\t\tres++;\n\t\t}\n\t\treturn res;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("p",[t._v("方法二：二分查找k-0.5，k+0.5的位置，差就是结果")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tint GetNumberOfK(vector<int> data, int k) {\n\t\tif (data.size() == 0) return 0;\t\t\t\t\t\t\t\n\t\treturn binarySearch(data, k + 0.5) - binarySearch(data,k-0.5);\n\t}\n\tint binarySearch(vector<int> &data, double k) {\n\t\tint l = 0, r = data.size() - 1, mid;\n\t\twhile (l <= r)\n\t\t{\n\t\t\tmid = (l + r) / 2;\t\t\t\n\t\t\tif (data.at(mid) < k)  l = mid + 1;\n\t\t\telse r = mid - 1;\n\t\t}\n         //此时有l  k  r\n\t\treturn l;\n         //等价于\n         //return r;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_38、二叉树的深度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_38、二叉树的深度"}},[t._v("#")]),t._v(" 38、二叉树的深度")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("p",[t._v("递归：")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int TreeDepth(TreeNode* pRoot) {\n    if (!pRoot) return 0;\n    return max(TreeDepth(pRoot->left), TreeDepth(pRoot->right)) + 1;\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("非递归：层次遍历同时统计层数")]),t._v(" "),s("p",[t._v("方法一：")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\n    public:\n    int TreeDepth(TreeNode* pRoot) {\n        if (!pRoot) return 0;\n        queue<TreeNode*> q;\n        q.push(pRoot); int depth = 0;\n        while (!q.empty()) {\n            int size = q.size();\n            depth++;\n            for (int i = 0; i < size; i++) {      //一次处理一层的数据\n                TreeNode *curr = q.front();\n                q.pop();\n                if (curr->left) q.push(curr->left);\n                if (curr->right) q.push(curr->right);\n            }\n        }\n        return depth;\n    }\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("p",[t._v("方法二：")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\n    public:\n    int TreeDepth(TreeNode* pRoot) {\n        if (!pRoot) return 0;\n        int depth = 0;\n        queue<TreeNode*> q;\n        q.push(pRoot);\n        int cnt1 = 1;//当前层的节点数\n        int cnt2 = 0;//下一层的节点数\n        while (!q.empty())\n        {\n            TreeNode *curr = q.front();\n            q.pop();\n            if (cnt1 != 0) cnt1--;\n            cnt2 += (int)(curr->left != NULL) + (int)(curr->right != NULL);\n            if (cnt1 == 0) {\n                cnt1 = cnt2;\n                cnt2 = 0;\n                depth++;\n            }\n            if (curr->left) q.push(curr->left);\n            if (curr->right) q.push(curr->right);\n        }\n        return depth;\n    }\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_39、平衡二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_39、平衡二叉树"}},[t._v("#")]),t._v(" 39、平衡二叉树")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("输入一棵二叉树，判断该二叉树是否是平衡二叉树。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("p",[t._v("递归：")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tbool IsBalanced_Solution(TreeNode* pRoot) {\n\t\tif (!pRoot) return true;\n\t\treturn abs(TreeDepth(pRoot->left) - TreeDepth(pRoot->right)) <= 1\n\t\t\t&& IsBalanced_Solution(pRoot->left)\n\t\t\t&& IsBalanced_Solution(pRoot->right);\n\t}\n\tint TreeDepth(TreeNode* pRoot) {\n\t\tif (!pRoot) return 0;\n\t\treturn max(TreeDepth(pRoot->left), TreeDepth(pRoot->right)) + 1;\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("上面递归方法对于**overlapping subproblems（重叠子问题）**重复计算了深度，因此如果从下往上计算深度")]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tbool IsBalanced_Solution(TreeNode* pRoot) {\n\t\treturn GetTreeDepthOrIfBalance(pRoot) == -1;\n\t}\t\n\tint GetTreeDepthOrIfBalance(TreeNode* pRoot) {\n\t\tif (!pRoot) return 0;\n\t\tint left = GetTreeDepthOrIfBalance(pRoot->left);\n\t\tif (left == -1) return -1;\n\t\tint right = GetTreeDepthOrIfBalance(pRoot->right);\n\t\tif (right == -1) return -1;\n\t\t//如果左右高度差大于1  返回-1表示该子树不平衡\n\t\t//如果该子树平衡，返回子树的深度+1\n\t\treturn abs(left - right) > 1 ? -1 : (max(left, right) + 1);\n\t}\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])])])]),t._v(" "),s("h2",{attrs:{id:"_40、数组中只出现一次的数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_40、数组中只出现一次的数字"}},[t._v("#")]),t._v(" 40、数组中只出现一次的数字")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("题目")])]),t._v(" "),s("p",[t._v("一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("KEY")])]),t._v(" "),s("ol",[s("li",[t._v("首先异或有下列性质：")]),t._v(" "),s("li",[t._v("异或是满足交换律和结合律")]),t._v(" "),s("li",[t._v("A^B = C , 则有 A^C = B, B^C = A")]),t._v(" "),s("li",[t._v("X^X = 0")]),t._v(" "),s("li",[t._v("X^0 = X")])]),t._v(" "),s("p",[s("strong",[t._v("因此多个数字相异或，相同的会抵消掉，最后结果是不同的数字异或的结果。")])]),t._v(" "),s("p",[t._v("一、首先把data数据相互异或，剩下的是两个不重复A，B数字异或的结果"),s("code",[t._v("xorRes")]),t._v("，找到它二进制第一个非零位，A、B在这位肯定不同。")]),t._v(" "),s("p",[t._v("二、然后将所有数据按这位划分为两部分：")]),t._v(" "),s("p",[t._v("对于A，B，肯定被划分到了两边")]),t._v(" "),s("p",[t._v("对于其他数字，肯定相同的都被划分到了一起")]),t._v(" "),s("p",[t._v("三、最后对两部分分别互相异或，得到的两个结果就是目标结果")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实现")])]),t._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n\tvoid FindNumsAppearOnce(vector<int> data, int* num1, int *num2) {\n\t\tif (data.size() == 2) {\n\t\t\t*num1 = data.at(0);\n\t\t\t*num2 = data.at(1);\n\t\t}\n\t\t*num1 = 0;\n\t\t*num2 = 0;\n         //步骤一\n\t\tint xorRes = 0;\n\t\tfor (auto x : data)\n\t\t\txorRes ^= x;\n\t\tint indexOfFirstBitOne = 0;\n\t\twhile ((xorRes & 1) == 0 && indexOfFirstBitOne<32) {\n\t\t\txorRes >>= 1;\n\t\t\tindexOfFirstBitOne++;\n\t\t}\n        //步骤二、三\n\t\tint i = 1 << indexOfFirstBitOne;\n\t\tfor (auto x : data) {\n\t\t\tif ((x&i) == i)\n\t\t\t\t*num1 ^= x;\n\t\t\telse *num2 ^= x;\n\t\t}\t\t\t\n\t}\t\n};\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br")])])])])])}),[],!1,null,null,null);n.default=e.exports}}]);